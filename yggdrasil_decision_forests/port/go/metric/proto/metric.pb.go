//
// Copyright 2022 Google LLC.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: yggdrasil_decision_forests/metric/metric.proto

package proto

import (
	proto1 "github.com/google/yggdrasil-decision-forests/yggdrasil_decision_forests/port/go/dataset/proto"
	proto "github.com/google/yggdrasil-decision-forests/yggdrasil_decision_forests/port/go/model/proto"
	proto2 "github.com/google/yggdrasil-decision-forests/yggdrasil_decision_forests/port/go/utils/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration of the evaluation of a model. Describes how the evaluation
// should be done.
type EvaluationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task of the model.
	Task *proto.Task `protobuf:"varint,1,opt,name=task,enum=yggdrasil_decision_forests.model.proto.Task,def=1" json:"task,omitempty"`
	// Evaluation configuration depending on the type of problem.
	//
	// Types that are assignable to TaskOptions:
	//	*EvaluationOptions_Classification_
	//	*EvaluationOptions_Regression_
	//	*EvaluationOptions_Ranking_
	//	*EvaluationOptions_Uplift_
	TaskOptions isEvaluationOptions_TaskOptions `protobuf_oneof:"task_options"`
	// Percentage of sampled predictions. If no predictions need to be sampled
	// (i.e. no part of the configuration needs it), this parameter is ignored and
	// no prediction is sampled.
	PredictionSampling *float32 `protobuf:"fixed32,4,opt,name=prediction_sampling,json=predictionSampling,def=1" json:"prediction_sampling,omitempty"`
	// Number of bootstrapping samples used to evaluate metric confidence
	// intervals and statistical test (i.e. all the metric ending with "[B]"). If
	// <=0, bootstrapping estimation is disabled. Note: Bootstrapping is done on
	// the sampled predictions (controlled by "prediction_sampling" parameter).
	// Note: Bootstrapping is an expensive computation. Therefore, for quick
	// experimentation with modeling, bootstrapping can be temporally reduced or
	// disabled.
	BootstrappingSamples *int64 `protobuf:"varint,5,opt,name=bootstrapping_samples,json=bootstrappingSamples,def=2000" json:"bootstrapping_samples,omitempty"`
	// Weights of the examples. This field does not have to match the
	// "weight_definition" in the model training. For example, the weighting can
	// be enabled for evaluation and disabled for training. Such case is rare
	// however.
	Weights *proto1.WeightDefinition `protobuf:"bytes,6,opt,name=weights" json:"weights,omitempty"`
}

// Default values for EvaluationOptions fields.
const (
	Default_EvaluationOptions_Task                 = proto.Task(1) // proto.Task_CLASSIFICATION
	Default_EvaluationOptions_PredictionSampling   = float32(1)
	Default_EvaluationOptions_BootstrappingSamples = int64(2000)
)

func (x *EvaluationOptions) Reset() {
	*x = EvaluationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationOptions) ProtoMessage() {}

func (x *EvaluationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationOptions.ProtoReflect.Descriptor instead.
func (*EvaluationOptions) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{0}
}

func (x *EvaluationOptions) GetTask() proto.Task {
	if x != nil && x.Task != nil {
		return *x.Task
	}
	return Default_EvaluationOptions_Task
}

func (m *EvaluationOptions) GetTaskOptions() isEvaluationOptions_TaskOptions {
	if m != nil {
		return m.TaskOptions
	}
	return nil
}

func (x *EvaluationOptions) GetClassification() *EvaluationOptions_Classification {
	if x, ok := x.GetTaskOptions().(*EvaluationOptions_Classification_); ok {
		return x.Classification
	}
	return nil
}

func (x *EvaluationOptions) GetRegression() *EvaluationOptions_Regression {
	if x, ok := x.GetTaskOptions().(*EvaluationOptions_Regression_); ok {
		return x.Regression
	}
	return nil
}

func (x *EvaluationOptions) GetRanking() *EvaluationOptions_Ranking {
	if x, ok := x.GetTaskOptions().(*EvaluationOptions_Ranking_); ok {
		return x.Ranking
	}
	return nil
}

func (x *EvaluationOptions) GetUplift() *EvaluationOptions_Uplift {
	if x, ok := x.GetTaskOptions().(*EvaluationOptions_Uplift_); ok {
		return x.Uplift
	}
	return nil
}

func (x *EvaluationOptions) GetPredictionSampling() float32 {
	if x != nil && x.PredictionSampling != nil {
		return *x.PredictionSampling
	}
	return Default_EvaluationOptions_PredictionSampling
}

func (x *EvaluationOptions) GetBootstrappingSamples() int64 {
	if x != nil && x.BootstrappingSamples != nil {
		return *x.BootstrappingSamples
	}
	return Default_EvaluationOptions_BootstrappingSamples
}

func (x *EvaluationOptions) GetWeights() *proto1.WeightDefinition {
	if x != nil {
		return x.Weights
	}
	return nil
}

type isEvaluationOptions_TaskOptions interface {
	isEvaluationOptions_TaskOptions()
}

type EvaluationOptions_Classification_ struct {
	Classification *EvaluationOptions_Classification `protobuf:"bytes,2,opt,name=classification,oneof"`
}

type EvaluationOptions_Regression_ struct {
	Regression *EvaluationOptions_Regression `protobuf:"bytes,3,opt,name=regression,oneof"`
}

type EvaluationOptions_Ranking_ struct {
	Ranking *EvaluationOptions_Ranking `protobuf:"bytes,7,opt,name=ranking,oneof"`
}

type EvaluationOptions_Uplift_ struct {
	Uplift *EvaluationOptions_Uplift `protobuf:"bytes,8,opt,name=uplift,oneof"`
}

func (*EvaluationOptions_Classification_) isEvaluationOptions_TaskOptions() {}

func (*EvaluationOptions_Regression_) isEvaluationOptions_TaskOptions() {}

func (*EvaluationOptions_Ranking_) isEvaluationOptions_TaskOptions() {}

func (*EvaluationOptions_Uplift_) isEvaluationOptions_TaskOptions() {}

// Evaluation results of a model.
//
// This proto is generated by the "EvaluateLearner" or "model->Evaluate()"
// functions.
//
// For manual evaluation, this proto is best generated using the
// "InitializeEvaluation", "AddPrediction" and "FinalizeEvaluation" functions in
// "metric.h".
//
// This proto can be converted into human readable text with "AppendTextReport"
// or into a html+plot with "SaveEvaluationInDirectory". The html version
// contains more information that the raw text.
//
// Individual metrics can be extracted using the utility methods defined in
// "metrics.h" e.g. "Accuracy()", "LogLoss()", "RMSE()".
type EvaluationResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of predictions (weighted by example weight).
	CountPredictions *float64 `protobuf:"fixed64,1,opt,name=count_predictions,json=countPredictions,def=0" json:"count_predictions,omitempty"`
	// Number of predictions (without weights).
	CountPredictionsNoWeight *int64 `protobuf:"varint,2,opt,name=count_predictions_no_weight,json=countPredictionsNoWeight,def=0" json:"count_predictions_no_weight,omitempty"`
	// Samples predictions. Only sampled if necessary (e.g. if ROC is computed).
	SampledPredictions []*proto.Prediction `protobuf:"bytes,3,rep,name=sampled_predictions,json=sampledPredictions" json:"sampled_predictions,omitempty"`
	// Number of sampled predictions (weighted by example weight).
	CountSampledPredictions *float64 `protobuf:"fixed64,4,opt,name=count_sampled_predictions,json=countSampledPredictions,def=0" json:"count_sampled_predictions,omitempty"`
	// Task of the model.
	Task *proto.Task `protobuf:"varint,5,opt,name=task,enum=yggdrasil_decision_forests.model.proto.Task,def=1" json:"task,omitempty"`
	// Evaluation results depending on the type of problem.
	//
	// Types that are assignable to Type:
	//	*EvaluationResults_Classification_
	//	*EvaluationResults_Regression_
	//	*EvaluationResults_Ranking_
	//	*EvaluationResults_Uplift_
	Type isEvaluationResults_Type `protobuf_oneof:"type"`
	// The dataspec of the label column. This field can contain information such
	// as: The possible label values, the distribution of the label values, the
	// string representation of the label value, etc.
	LabelColumn *proto1.Column `protobuf:"bytes,8,opt,name=label_column,json=labelColumn" json:"label_column,omitempty"`
	// Training time of the model. In case of cross-validation evaluation results,
	// "training_duration_in_seconds" is the average training time of a single
	// model.
	TrainingDurationInSeconds *float32 `protobuf:"fixed32,9,opt,name=training_duration_in_seconds,json=trainingDurationInSeconds" json:"training_duration_in_seconds,omitempty"`
	// Value of the loss function used to optimize the model.
	//
	// Not all machine learning algorithms are optimizing a loss function, and
	// different loss functions can be compatible for a given task.
	LossValue *float32 `protobuf:"fixed32,10,opt,name=loss_value,json=lossValue" json:"loss_value,omitempty"`
	LossName  *string  `protobuf:"bytes,11,opt,name=loss_name,json=lossName" json:"loss_name,omitempty"`
	// Number of folds used for the evaluation.
	// The number of folds is 1 for train-and-test, and equals to the
	// cross-validation number of folds in case of cross-validation.
	NumFolds *int32 `protobuf:"varint,13,opt,name=num_folds,json=numFolds" json:"num_folds,omitempty"` // Next ID: 15
}

// Default values for EvaluationResults fields.
const (
	Default_EvaluationResults_CountPredictions         = float64(0)
	Default_EvaluationResults_CountPredictionsNoWeight = int64(0)
	Default_EvaluationResults_CountSampledPredictions  = float64(0)
	Default_EvaluationResults_Task                     = proto.Task(1) // proto.Task_CLASSIFICATION
)

func (x *EvaluationResults) Reset() {
	*x = EvaluationResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationResults) ProtoMessage() {}

func (x *EvaluationResults) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationResults.ProtoReflect.Descriptor instead.
func (*EvaluationResults) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{1}
}

func (x *EvaluationResults) GetCountPredictions() float64 {
	if x != nil && x.CountPredictions != nil {
		return *x.CountPredictions
	}
	return Default_EvaluationResults_CountPredictions
}

func (x *EvaluationResults) GetCountPredictionsNoWeight() int64 {
	if x != nil && x.CountPredictionsNoWeight != nil {
		return *x.CountPredictionsNoWeight
	}
	return Default_EvaluationResults_CountPredictionsNoWeight
}

func (x *EvaluationResults) GetSampledPredictions() []*proto.Prediction {
	if x != nil {
		return x.SampledPredictions
	}
	return nil
}

func (x *EvaluationResults) GetCountSampledPredictions() float64 {
	if x != nil && x.CountSampledPredictions != nil {
		return *x.CountSampledPredictions
	}
	return Default_EvaluationResults_CountSampledPredictions
}

func (x *EvaluationResults) GetTask() proto.Task {
	if x != nil && x.Task != nil {
		return *x.Task
	}
	return Default_EvaluationResults_Task
}

func (m *EvaluationResults) GetType() isEvaluationResults_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *EvaluationResults) GetClassification() *EvaluationResults_Classification {
	if x, ok := x.GetType().(*EvaluationResults_Classification_); ok {
		return x.Classification
	}
	return nil
}

func (x *EvaluationResults) GetRegression() *EvaluationResults_Regression {
	if x, ok := x.GetType().(*EvaluationResults_Regression_); ok {
		return x.Regression
	}
	return nil
}

func (x *EvaluationResults) GetRanking() *EvaluationResults_Ranking {
	if x, ok := x.GetType().(*EvaluationResults_Ranking_); ok {
		return x.Ranking
	}
	return nil
}

func (x *EvaluationResults) GetUplift() *EvaluationResults_Uplift {
	if x, ok := x.GetType().(*EvaluationResults_Uplift_); ok {
		return x.Uplift
	}
	return nil
}

func (x *EvaluationResults) GetLabelColumn() *proto1.Column {
	if x != nil {
		return x.LabelColumn
	}
	return nil
}

func (x *EvaluationResults) GetTrainingDurationInSeconds() float32 {
	if x != nil && x.TrainingDurationInSeconds != nil {
		return *x.TrainingDurationInSeconds
	}
	return 0
}

func (x *EvaluationResults) GetLossValue() float32 {
	if x != nil && x.LossValue != nil {
		return *x.LossValue
	}
	return 0
}

func (x *EvaluationResults) GetLossName() string {
	if x != nil && x.LossName != nil {
		return *x.LossName
	}
	return ""
}

func (x *EvaluationResults) GetNumFolds() int32 {
	if x != nil && x.NumFolds != nil {
		return *x.NumFolds
	}
	return 0
}

type isEvaluationResults_Type interface {
	isEvaluationResults_Type()
}

type EvaluationResults_Classification_ struct {
	Classification *EvaluationResults_Classification `protobuf:"bytes,6,opt,name=classification,oneof"`
}

type EvaluationResults_Regression_ struct {
	Regression *EvaluationResults_Regression `protobuf:"bytes,7,opt,name=regression,oneof"`
}

type EvaluationResults_Ranking_ struct {
	Ranking *EvaluationResults_Ranking `protobuf:"bytes,12,opt,name=ranking,oneof"`
}

type EvaluationResults_Uplift_ struct {
	Uplift *EvaluationResults_Uplift `protobuf:"bytes,14,opt,name=uplift,oneof"`
}

func (*EvaluationResults_Classification_) isEvaluationResults_Type() {}

func (*EvaluationResults_Regression_) isEvaluationResults_Type() {}

func (*EvaluationResults_Ranking_) isEvaluationResults_Type() {}

func (*EvaluationResults_Uplift_) isEvaluationResults_Type() {}

// Reference a metric."MetricAccessor" is used as a parameter of the function
// "GetMetric" to extract metric values from evaluation results proto.
//
// Example:
// a = EvaluationResults { classification { accuracy:0.7 auc:0.8 ap:0.9 } }
// b = MetricAccessor { classification {}}
// GetMetric(a,b) -> 0.7
type MetricAccessor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Task:
	//	*MetricAccessor_Classification_
	//	*MetricAccessor_Regression_
	//	*MetricAccessor_Loss_
	//	*MetricAccessor_Ranking_
	//	*MetricAccessor_Uplift_
	Task isMetricAccessor_Task `protobuf_oneof:"Task"`
}

func (x *MetricAccessor) Reset() {
	*x = MetricAccessor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor) ProtoMessage() {}

func (x *MetricAccessor) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor.ProtoReflect.Descriptor instead.
func (*MetricAccessor) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2}
}

func (m *MetricAccessor) GetTask() isMetricAccessor_Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (x *MetricAccessor) GetClassification() *MetricAccessor_Classification {
	if x, ok := x.GetTask().(*MetricAccessor_Classification_); ok {
		return x.Classification
	}
	return nil
}

func (x *MetricAccessor) GetRegression() *MetricAccessor_Regression {
	if x, ok := x.GetTask().(*MetricAccessor_Regression_); ok {
		return x.Regression
	}
	return nil
}

func (x *MetricAccessor) GetLoss() *MetricAccessor_Loss {
	if x, ok := x.GetTask().(*MetricAccessor_Loss_); ok {
		return x.Loss
	}
	return nil
}

func (x *MetricAccessor) GetRanking() *MetricAccessor_Ranking {
	if x, ok := x.GetTask().(*MetricAccessor_Ranking_); ok {
		return x.Ranking
	}
	return nil
}

func (x *MetricAccessor) GetUplift() *MetricAccessor_Uplift {
	if x, ok := x.GetTask().(*MetricAccessor_Uplift_); ok {
		return x.Uplift
	}
	return nil
}

type isMetricAccessor_Task interface {
	isMetricAccessor_Task()
}

type MetricAccessor_Classification_ struct {
	Classification *MetricAccessor_Classification `protobuf:"bytes,1,opt,name=classification,oneof"`
}

type MetricAccessor_Regression_ struct {
	Regression *MetricAccessor_Regression `protobuf:"bytes,2,opt,name=regression,oneof"`
}

type MetricAccessor_Loss_ struct {
	Loss *MetricAccessor_Loss `protobuf:"bytes,3,opt,name=loss,oneof"`
}

type MetricAccessor_Ranking_ struct {
	Ranking *MetricAccessor_Ranking `protobuf:"bytes,4,opt,name=ranking,oneof"`
}

type MetricAccessor_Uplift_ struct {
	Uplift *MetricAccessor_Uplift `protobuf:"bytes,5,opt,name=uplift,oneof"`
}

func (*MetricAccessor_Classification_) isMetricAccessor_Task() {}

func (*MetricAccessor_Regression_) isMetricAccessor_Task() {}

func (*MetricAccessor_Loss_) isMetricAccessor_Task() {}

func (*MetricAccessor_Ranking_) isMetricAccessor_Task() {}

func (*MetricAccessor_Uplift_) isMetricAccessor_Task() {}

// A receiver operating characteristic curve.
type Roc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Points sorted with decreasing recall (i.e. increasing threshold).
	Curve []*Roc_Point `protobuf:"bytes,1,rep,name=curve" json:"curve,omitempty"`
	// Sum of the tp+fp+tn+fn of one element (this is the same for all elements).
	// "sum" is equal to "count_predictions" if the ROC is computed without
	// sampling (i.e. roc_prediction_sampling==1).
	CountPredictions *float64 `protobuf:"fixed64,2,opt,name=count_predictions,json=countPredictions" json:"count_predictions,omitempty"`
	// Area under the curve.
	Auc *float64 `protobuf:"fixed64,3,opt,name=auc" json:"auc,omitempty"`
	// Precision/Recall AUC.
	PrAuc *float64 `protobuf:"fixed64,4,opt,name=pr_auc,json=prAuc" json:"pr_auc,omitempty"`
	// Average Precision.
	Ap *float64 `protobuf:"fixed64,10,opt,name=ap" json:"ap,omitempty"`
	// Metric X evaluated under constraint of a given metric Y value.
	// These three fields have the same number of element as the fields of the
	// same name in "EvaluationOptions::Classification".
	PrecisionAtRecall         []*Roc_XAtYMetric `protobuf:"bytes,5,rep,name=precision_at_recall,json=precisionAtRecall" json:"precision_at_recall,omitempty"`
	RecallAtPrecision         []*Roc_XAtYMetric `protobuf:"bytes,6,rep,name=recall_at_precision,json=recallAtPrecision" json:"recall_at_precision,omitempty"`
	PrecisionAtVolume         []*Roc_XAtYMetric `protobuf:"bytes,7,rep,name=precision_at_volume,json=precisionAtVolume" json:"precision_at_volume,omitempty"`
	RecallAtFalsePositiveRate []*Roc_XAtYMetric `protobuf:"bytes,8,rep,name=recall_at_false_positive_rate,json=recallAtFalsePositiveRate" json:"recall_at_false_positive_rate,omitempty"`
	FalsePositiveRateAtRecall []*Roc_XAtYMetric `protobuf:"bytes,9,rep,name=false_positive_rate_at_recall,json=falsePositiveRateAtRecall" json:"false_positive_rate_at_recall,omitempty"`
	// Lower and upper bounds of all metrics computed using non-parametric
	// percentile bootstrapping. Only available if bootstrapping is enabled i.e.
	// num_bootstrapping_samples>=1.
	BootstrapLowerBounds_95P *Roc `protobuf:"bytes,11,opt,name=bootstrap_lower_bounds_95p,json=bootstrapLowerBounds95p" json:"bootstrap_lower_bounds_95p,omitempty"`
	BootstrapUpperBounds_95P *Roc `protobuf:"bytes,12,opt,name=bootstrap_upper_bounds_95p,json=bootstrapUpperBounds95p" json:"bootstrap_upper_bounds_95p,omitempty"`
}

func (x *Roc) Reset() {
	*x = Roc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Roc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Roc) ProtoMessage() {}

func (x *Roc) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Roc.ProtoReflect.Descriptor instead.
func (*Roc) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{3}
}

func (x *Roc) GetCurve() []*Roc_Point {
	if x != nil {
		return x.Curve
	}
	return nil
}

func (x *Roc) GetCountPredictions() float64 {
	if x != nil && x.CountPredictions != nil {
		return *x.CountPredictions
	}
	return 0
}

func (x *Roc) GetAuc() float64 {
	if x != nil && x.Auc != nil {
		return *x.Auc
	}
	return 0
}

func (x *Roc) GetPrAuc() float64 {
	if x != nil && x.PrAuc != nil {
		return *x.PrAuc
	}
	return 0
}

func (x *Roc) GetAp() float64 {
	if x != nil && x.Ap != nil {
		return *x.Ap
	}
	return 0
}

func (x *Roc) GetPrecisionAtRecall() []*Roc_XAtYMetric {
	if x != nil {
		return x.PrecisionAtRecall
	}
	return nil
}

func (x *Roc) GetRecallAtPrecision() []*Roc_XAtYMetric {
	if x != nil {
		return x.RecallAtPrecision
	}
	return nil
}

func (x *Roc) GetPrecisionAtVolume() []*Roc_XAtYMetric {
	if x != nil {
		return x.PrecisionAtVolume
	}
	return nil
}

func (x *Roc) GetRecallAtFalsePositiveRate() []*Roc_XAtYMetric {
	if x != nil {
		return x.RecallAtFalsePositiveRate
	}
	return nil
}

func (x *Roc) GetFalsePositiveRateAtRecall() []*Roc_XAtYMetric {
	if x != nil {
		return x.FalsePositiveRateAtRecall
	}
	return nil
}

func (x *Roc) GetBootstrapLowerBounds_95P() *Roc {
	if x != nil {
		return x.BootstrapLowerBounds_95P
	}
	return nil
}

func (x *Roc) GetBootstrapUpperBounds_95P() *Roc {
	if x != nil {
		return x.BootstrapUpperBounds_95P
	}
	return nil
}

// Estimated measure of a metric.
type MetricEstimate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expected value.
	Value *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	// Upper and lower 95% bound estimated using bootstrapping.
	BootstrapBased_95P *Bounds `protobuf:"bytes,2,opt,name=bootstrap_based_95p,json=bootstrapBased95p" json:"bootstrap_based_95p,omitempty"`
}

func (x *MetricEstimate) Reset() {
	*x = MetricEstimate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricEstimate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricEstimate) ProtoMessage() {}

func (x *MetricEstimate) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricEstimate.ProtoReflect.Descriptor instead.
func (*MetricEstimate) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{4}
}

func (x *MetricEstimate) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *MetricEstimate) GetBootstrapBased_95P() *Bounds {
	if x != nil {
		return x.BootstrapBased_95P
	}
	return nil
}

type Bounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lower *float64 `protobuf:"fixed64,1,opt,name=lower" json:"lower,omitempty"`
	Upper *float64 `protobuf:"fixed64,2,opt,name=upper" json:"upper,omitempty"`
}

func (x *Bounds) Reset() {
	*x = Bounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounds) ProtoMessage() {}

func (x *Bounds) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounds.ProtoReflect.Descriptor instead.
func (*Bounds) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{5}
}

func (x *Bounds) GetLower() float64 {
	if x != nil && x.Lower != nil {
		return *x.Lower
	}
	return 0
}

func (x *Bounds) GetUpper() float64 {
	if x != nil && x.Upper != nil {
		return *x.Upper
	}
	return 0
}

type EvaluationOptions_Classification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Do compute the ROC metrics (or other metrics using the same type of
	// computation e.g. PR-AUC, P@R).
	RocEnable *bool `protobuf:"varint,1,opt,name=roc_enable,json=rocEnable,def=1" json:"roc_enable,omitempty"`
	// Maximum number of points in the ROC curve.
	MaxRocSamples *int64 `protobuf:"varint,2,opt,name=max_roc_samples,json=maxRocSamples,def=10000" json:"max_roc_samples,omitempty"`
	// List of recall values (between 0 and 1) for the evaluation of precision
	// at given recall.
	PrecisionAtRecall []float64 `protobuf:"fixed64,3,rep,name=precision_at_recall,json=precisionAtRecall" json:"precision_at_recall,omitempty"`
	// List of precision values (between 0 and 1) for the evaluation of recall
	// at given precision.
	RecallAtPrecision []float64 `protobuf:"fixed64,4,rep,name=recall_at_precision,json=recallAtPrecision" json:"recall_at_precision,omitempty"`
	// List of volume values (between 0 and 1) for the evaluation of precision
	// at given volume.
	PrecisionAtVolume []float64 `protobuf:"fixed64,5,rep,name=precision_at_volume,json=precisionAtVolume" json:"precision_at_volume,omitempty"`
	// List of false positive rates for the evaluation of recall at given false
	// positive rates.
	RecallAtFalsePositiveRate []float64 `protobuf:"fixed64,6,rep,name=recall_at_false_positive_rate,json=recallAtFalsePositiveRate" json:"recall_at_false_positive_rate,omitempty"`
	// List of false recall for the evaluation of false positive rate at given
	// recall.
	FalsePositiveRateAtRecall []float64 `protobuf:"fixed64,7,rep,name=false_positive_rate_at_recall,json=falsePositiveRateAtRecall" json:"false_positive_rate_at_recall,omitempty"` // Next ID: 8
}

// Default values for EvaluationOptions_Classification fields.
const (
	Default_EvaluationOptions_Classification_RocEnable     = bool(true)
	Default_EvaluationOptions_Classification_MaxRocSamples = int64(10000)
)

func (x *EvaluationOptions_Classification) Reset() {
	*x = EvaluationOptions_Classification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationOptions_Classification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationOptions_Classification) ProtoMessage() {}

func (x *EvaluationOptions_Classification) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationOptions_Classification.ProtoReflect.Descriptor instead.
func (*EvaluationOptions_Classification) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EvaluationOptions_Classification) GetRocEnable() bool {
	if x != nil && x.RocEnable != nil {
		return *x.RocEnable
	}
	return Default_EvaluationOptions_Classification_RocEnable
}

func (x *EvaluationOptions_Classification) GetMaxRocSamples() int64 {
	if x != nil && x.MaxRocSamples != nil {
		return *x.MaxRocSamples
	}
	return Default_EvaluationOptions_Classification_MaxRocSamples
}

func (x *EvaluationOptions_Classification) GetPrecisionAtRecall() []float64 {
	if x != nil {
		return x.PrecisionAtRecall
	}
	return nil
}

func (x *EvaluationOptions_Classification) GetRecallAtPrecision() []float64 {
	if x != nil {
		return x.RecallAtPrecision
	}
	return nil
}

func (x *EvaluationOptions_Classification) GetPrecisionAtVolume() []float64 {
	if x != nil {
		return x.PrecisionAtVolume
	}
	return nil
}

func (x *EvaluationOptions_Classification) GetRecallAtFalsePositiveRate() []float64 {
	if x != nil {
		return x.RecallAtFalsePositiveRate
	}
	return nil
}

func (x *EvaluationOptions_Classification) GetFalsePositiveRateAtRecall() []float64 {
	if x != nil {
		return x.FalsePositiveRateAtRecall
	}
	return nil
}

type EvaluationOptions_Regression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Do compute the regression plots (histogram of ground truth, residual and
	// predictions, normality test of residual, conditional plots).
	EnableRegressionPlots *bool `protobuf:"varint,1,opt,name=enable_regression_plots,json=enableRegressionPlots,def=1" json:"enable_regression_plots,omitempty"`
}

// Default values for EvaluationOptions_Regression fields.
const (
	Default_EvaluationOptions_Regression_EnableRegressionPlots = bool(true)
)

func (x *EvaluationOptions_Regression) Reset() {
	*x = EvaluationOptions_Regression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationOptions_Regression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationOptions_Regression) ProtoMessage() {}

func (x *EvaluationOptions_Regression) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationOptions_Regression.ProtoReflect.Descriptor instead.
func (*EvaluationOptions_Regression) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EvaluationOptions_Regression) GetEnableRegressionPlots() bool {
	if x != nil && x.EnableRegressionPlots != nil {
		return *x.EnableRegressionPlots
	}
	return Default_EvaluationOptions_Regression_EnableRegressionPlots
}

type EvaluationOptions_Ranking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of evaluated elements.
	NdcgTruncation *int32 `protobuf:"varint,1,opt,name=ndcg_truncation,json=ndcgTruncation,def=5" json:"ndcg_truncation,omitempty"`
	// Rank cut-off at which Mean Reciprocal Rank is computed.
	MrrTruncation *int32 `protobuf:"varint,2,opt,name=mrr_truncation,json=mrrTruncation,def=10" json:"mrr_truncation,omitempty"`
	// If false (default) and if all the predictions (items) are in the same
	// group (i.e. there is only one group), raises an error.
	AllowOnlyOneGroup *bool `protobuf:"varint,3,opt,name=allow_only_one_group,json=allowOnlyOneGroup,def=0" json:"allow_only_one_group,omitempty"`
}

// Default values for EvaluationOptions_Ranking fields.
const (
	Default_EvaluationOptions_Ranking_NdcgTruncation    = int32(5)
	Default_EvaluationOptions_Ranking_MrrTruncation     = int32(10)
	Default_EvaluationOptions_Ranking_AllowOnlyOneGroup = bool(false)
)

func (x *EvaluationOptions_Ranking) Reset() {
	*x = EvaluationOptions_Ranking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationOptions_Ranking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationOptions_Ranking) ProtoMessage() {}

func (x *EvaluationOptions_Ranking) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationOptions_Ranking.ProtoReflect.Descriptor instead.
func (*EvaluationOptions_Ranking) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{0, 2}
}

func (x *EvaluationOptions_Ranking) GetNdcgTruncation() int32 {
	if x != nil && x.NdcgTruncation != nil {
		return *x.NdcgTruncation
	}
	return Default_EvaluationOptions_Ranking_NdcgTruncation
}

func (x *EvaluationOptions_Ranking) GetMrrTruncation() int32 {
	if x != nil && x.MrrTruncation != nil {
		return *x.MrrTruncation
	}
	return Default_EvaluationOptions_Ranking_MrrTruncation
}

func (x *EvaluationOptions_Ranking) GetAllowOnlyOneGroup() bool {
	if x != nil && x.AllowOnlyOneGroup != nil {
		return *x.AllowOnlyOneGroup
	}
	return Default_EvaluationOptions_Ranking_AllowOnlyOneGroup
}

type EvaluationOptions_Uplift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EvaluationOptions_Uplift) Reset() {
	*x = EvaluationOptions_Uplift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationOptions_Uplift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationOptions_Uplift) ProtoMessage() {}

func (x *EvaluationOptions_Uplift) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationOptions_Uplift.ProtoReflect.Descriptor instead.
func (*EvaluationOptions_Uplift) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{0, 3}
}

type EvaluationResults_Classification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Confusion between the label and the predictions.
	Confusion *proto2.IntegersConfusionMatrixDouble `protobuf:"bytes,1,opt,name=confusion" json:"confusion,omitempty"`
	// One-vs-other Receiver operating characteristic curve. Indexed by the
	// categorical label value.
	Rocs []*Roc `protobuf:"bytes,2,rep,name=rocs" json:"rocs,omitempty"`
	// Sum of the log loss.
	SumLogLoss *float64 `protobuf:"fixed64,3,opt,name=sum_log_loss,json=sumLogLoss,def=0" json:"sum_log_loss,omitempty"`
	// Accuracy of the model. If both "accuracy" and "confusion" is specified,
	// they represent the same value.
	Accuracy *float64 `protobuf:"fixed64,5,opt,name=accuracy" json:"accuracy,omitempty"` // Next ID: 6
}

// Default values for EvaluationResults_Classification fields.
const (
	Default_EvaluationResults_Classification_SumLogLoss = float64(0)
)

func (x *EvaluationResults_Classification) Reset() {
	*x = EvaluationResults_Classification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationResults_Classification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationResults_Classification) ProtoMessage() {}

func (x *EvaluationResults_Classification) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationResults_Classification.ProtoReflect.Descriptor instead.
func (*EvaluationResults_Classification) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{1, 0}
}

func (x *EvaluationResults_Classification) GetConfusion() *proto2.IntegersConfusionMatrixDouble {
	if x != nil {
		return x.Confusion
	}
	return nil
}

func (x *EvaluationResults_Classification) GetRocs() []*Roc {
	if x != nil {
		return x.Rocs
	}
	return nil
}

func (x *EvaluationResults_Classification) GetSumLogLoss() float64 {
	if x != nil && x.SumLogLoss != nil {
		return *x.SumLogLoss
	}
	return Default_EvaluationResults_Classification_SumLogLoss
}

func (x *EvaluationResults_Classification) GetAccuracy() float64 {
	if x != nil && x.Accuracy != nil {
		return *x.Accuracy
	}
	return 0
}

type EvaluationResults_Regression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sum for the squared error. For regression only.
	SumSquareError *float64 `protobuf:"fixed64,1,opt,name=sum_square_error,json=sumSquareError,def=0" json:"sum_square_error,omitempty"`
	// Sum of the labels.
	SumLabel *float64 `protobuf:"fixed64,2,opt,name=sum_label,json=sumLabel,def=0" json:"sum_label,omitempty"`
	// Sum of the square of the labels.
	SumSquareLabel *float64 `protobuf:"fixed64,3,opt,name=sum_square_label,json=sumSquareLabel,def=0" json:"sum_square_label,omitempty"`
	// Lower and upper bounds of the RMSE computed using non-parametric
	// bootstrapping.
	BootstrapRmseLowerBounds_95P *float64 `protobuf:"fixed64,4,opt,name=bootstrap_rmse_lower_bounds_95p,json=bootstrapRmseLowerBounds95p" json:"bootstrap_rmse_lower_bounds_95p,omitempty"`
	BootstrapRmseUpperBounds_95P *float64 `protobuf:"fixed64,5,opt,name=bootstrap_rmse_upper_bounds_95p,json=bootstrapRmseUpperBounds95p" json:"bootstrap_rmse_upper_bounds_95p,omitempty"` // Next ID: 6
}

// Default values for EvaluationResults_Regression fields.
const (
	Default_EvaluationResults_Regression_SumSquareError = float64(0)
	Default_EvaluationResults_Regression_SumLabel       = float64(0)
	Default_EvaluationResults_Regression_SumSquareLabel = float64(0)
)

func (x *EvaluationResults_Regression) Reset() {
	*x = EvaluationResults_Regression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationResults_Regression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationResults_Regression) ProtoMessage() {}

func (x *EvaluationResults_Regression) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationResults_Regression.ProtoReflect.Descriptor instead.
func (*EvaluationResults_Regression) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{1, 1}
}

func (x *EvaluationResults_Regression) GetSumSquareError() float64 {
	if x != nil && x.SumSquareError != nil {
		return *x.SumSquareError
	}
	return Default_EvaluationResults_Regression_SumSquareError
}

func (x *EvaluationResults_Regression) GetSumLabel() float64 {
	if x != nil && x.SumLabel != nil {
		return *x.SumLabel
	}
	return Default_EvaluationResults_Regression_SumLabel
}

func (x *EvaluationResults_Regression) GetSumSquareLabel() float64 {
	if x != nil && x.SumSquareLabel != nil {
		return *x.SumSquareLabel
	}
	return Default_EvaluationResults_Regression_SumSquareLabel
}

func (x *EvaluationResults_Regression) GetBootstrapRmseLowerBounds_95P() float64 {
	if x != nil && x.BootstrapRmseLowerBounds_95P != nil {
		return *x.BootstrapRmseLowerBounds_95P
	}
	return 0
}

func (x *EvaluationResults_Regression) GetBootstrapRmseUpperBounds_95P() float64 {
	if x != nil && x.BootstrapRmseUpperBounds_95P != nil {
		return *x.BootstrapRmseUpperBounds_95P
	}
	return 0
}

type EvaluationResults_Ranking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ndcg                *MetricEstimate `protobuf:"bytes,5,opt,name=ndcg" json:"ndcg,omitempty"`
	NdcgTruncation      *int32          `protobuf:"varint,2,opt,name=ndcg_truncation,json=ndcgTruncation" json:"ndcg_truncation,omitempty"`
	NumGroups           *int64          `protobuf:"varint,3,opt,name=num_groups,json=numGroups,def=0" json:"num_groups,omitempty"`
	MinNumItemsInGroup  *int64          `protobuf:"varint,10,opt,name=min_num_items_in_group,json=minNumItemsInGroup,def=0" json:"min_num_items_in_group,omitempty"`
	MaxNumItemsInGroup  *int64          `protobuf:"varint,11,opt,name=max_num_items_in_group,json=maxNumItemsInGroup,def=0" json:"max_num_items_in_group,omitempty"`
	MeanNumItemsInGroup *float64        `protobuf:"fixed64,12,opt,name=mean_num_items_in_group,json=meanNumItemsInGroup,def=0" json:"mean_num_items_in_group,omitempty"`
	DefaultNdcg         *float64        `protobuf:"fixed64,4,opt,name=default_ndcg,json=defaultNdcg,def=0" json:"default_ndcg,omitempty"`
	Mrr                 *MetricEstimate `protobuf:"bytes,8,opt,name=mrr" json:"mrr,omitempty"`
	MrrTruncation       *int32          `protobuf:"varint,9,opt,name=mrr_truncation,json=mrrTruncation" json:"mrr_truncation,omitempty"`
	// Fraction of examples were the highest predicted example is also the
	// example with the highest relevance value.
	PrecisionAt_1 *MetricEstimate `protobuf:"bytes,13,opt,name=precision_at_1,json=precisionAt1" json:"precision_at_1,omitempty"`
}

// Default values for EvaluationResults_Ranking fields.
const (
	Default_EvaluationResults_Ranking_NumGroups           = int64(0)
	Default_EvaluationResults_Ranking_MinNumItemsInGroup  = int64(0)
	Default_EvaluationResults_Ranking_MaxNumItemsInGroup  = int64(0)
	Default_EvaluationResults_Ranking_MeanNumItemsInGroup = float64(0)
	Default_EvaluationResults_Ranking_DefaultNdcg         = float64(0)
)

func (x *EvaluationResults_Ranking) Reset() {
	*x = EvaluationResults_Ranking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationResults_Ranking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationResults_Ranking) ProtoMessage() {}

func (x *EvaluationResults_Ranking) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationResults_Ranking.ProtoReflect.Descriptor instead.
func (*EvaluationResults_Ranking) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{1, 2}
}

func (x *EvaluationResults_Ranking) GetNdcg() *MetricEstimate {
	if x != nil {
		return x.Ndcg
	}
	return nil
}

func (x *EvaluationResults_Ranking) GetNdcgTruncation() int32 {
	if x != nil && x.NdcgTruncation != nil {
		return *x.NdcgTruncation
	}
	return 0
}

func (x *EvaluationResults_Ranking) GetNumGroups() int64 {
	if x != nil && x.NumGroups != nil {
		return *x.NumGroups
	}
	return Default_EvaluationResults_Ranking_NumGroups
}

func (x *EvaluationResults_Ranking) GetMinNumItemsInGroup() int64 {
	if x != nil && x.MinNumItemsInGroup != nil {
		return *x.MinNumItemsInGroup
	}
	return Default_EvaluationResults_Ranking_MinNumItemsInGroup
}

func (x *EvaluationResults_Ranking) GetMaxNumItemsInGroup() int64 {
	if x != nil && x.MaxNumItemsInGroup != nil {
		return *x.MaxNumItemsInGroup
	}
	return Default_EvaluationResults_Ranking_MaxNumItemsInGroup
}

func (x *EvaluationResults_Ranking) GetMeanNumItemsInGroup() float64 {
	if x != nil && x.MeanNumItemsInGroup != nil {
		return *x.MeanNumItemsInGroup
	}
	return Default_EvaluationResults_Ranking_MeanNumItemsInGroup
}

func (x *EvaluationResults_Ranking) GetDefaultNdcg() float64 {
	if x != nil && x.DefaultNdcg != nil {
		return *x.DefaultNdcg
	}
	return Default_EvaluationResults_Ranking_DefaultNdcg
}

func (x *EvaluationResults_Ranking) GetMrr() *MetricEstimate {
	if x != nil {
		return x.Mrr
	}
	return nil
}

func (x *EvaluationResults_Ranking) GetMrrTruncation() int32 {
	if x != nil && x.MrrTruncation != nil {
		return *x.MrrTruncation
	}
	return 0
}

func (x *EvaluationResults_Ranking) GetPrecisionAt_1() *MetricEstimate {
	if x != nil {
		return x.PrecisionAt_1
	}
	return nil
}

type EvaluationResults_Uplift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: In the case of multi-treatments, the "auuc" and "qini" are the
	// example weights average of the per-treatment AUUC and Qini.
	//
	// We use the implementation described in Guelman ("Optimal personalized
	// treatment learning models with insurance applications") or in Betlei
	// ("Treatment targeting by AUUC maximization with generalization
	// guarantees") work.
	Auuc *float64 `protobuf:"fixed64,1,opt,name=auuc" json:"auuc,omitempty"`
	Qini *float64 `protobuf:"fixed64,2,opt,name=qini" json:"qini,omitempty"`
	// Number of possible treatments. The treatment values (i.e. the value of
	// the categorical column specifying the treatment) are in [1,
	// num_treatments+1) with value "1" reserved for the control treatment.
	//
	// For example, in case of single-treatment vs control, "num_treatments=2"
	// and the treatment value will be 1 (control) or 2 (treatment).
	NumTreatments *int32 `protobuf:"varint,3,opt,name=num_treatments,json=numTreatments" json:"num_treatments,omitempty"`
	// The Conditional Average Treatment Effect Calibration metrics
	// (cate_calbration) computes the l2 expected calibration error of a binary
	// treatment uplift model. Miscalibration is a phenomenon that magnitute
	// of a treatment effect is overestimated due to overfitting CATE
	// training data. Here we use the expected "l2 norm of difference between
	// 1) predicted CATE, and 2) unbiased estimation of observed CATE" over all
	// uplift values.
	//
	// The metrics value is greater than 0, with lower values being more
	// desirable, i.e. "more calibrated". This metric is defined in
	// equation (2.4) of paper "Calibration Error for Heterogeneous Treatment
	// Effects", by Xu et al. (https://arxiv.org/pdf/2203.13364.pdf)
	CateCalibration *float64 `protobuf:"fixed64,4,opt,name=cate_calibration,json=cateCalibration" json:"cate_calibration,omitempty"`
}

func (x *EvaluationResults_Uplift) Reset() {
	*x = EvaluationResults_Uplift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationResults_Uplift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationResults_Uplift) ProtoMessage() {}

func (x *EvaluationResults_Uplift) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationResults_Uplift.ProtoReflect.Descriptor instead.
func (*EvaluationResults_Uplift) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{1, 3}
}

func (x *EvaluationResults_Uplift) GetAuuc() float64 {
	if x != nil && x.Auuc != nil {
		return *x.Auuc
	}
	return 0
}

func (x *EvaluationResults_Uplift) GetQini() float64 {
	if x != nil && x.Qini != nil {
		return *x.Qini
	}
	return 0
}

func (x *EvaluationResults_Uplift) GetNumTreatments() int32 {
	if x != nil && x.NumTreatments != nil {
		return *x.NumTreatments
	}
	return 0
}

func (x *EvaluationResults_Uplift) GetCateCalibration() float64 {
	if x != nil && x.CateCalibration != nil {
		return *x.CateCalibration
	}
	return 0
}

type MetricAccessor_Classification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*MetricAccessor_Classification_Accuracy_
	//	*MetricAccessor_Classification_Logloss
	//	*MetricAccessor_Classification_OneVsOther_
	Type isMetricAccessor_Classification_Type `protobuf_oneof:"Type"`
}

func (x *MetricAccessor_Classification) Reset() {
	*x = MetricAccessor_Classification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification) ProtoMessage() {}

func (x *MetricAccessor_Classification) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0}
}

func (m *MetricAccessor_Classification) GetType() isMetricAccessor_Classification_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MetricAccessor_Classification) GetAccuracy() *MetricAccessor_Classification_Accuracy {
	if x, ok := x.GetType().(*MetricAccessor_Classification_Accuracy_); ok {
		return x.Accuracy
	}
	return nil
}

func (x *MetricAccessor_Classification) GetLogloss() *MetricAccessor_Classification_LogLoss {
	if x, ok := x.GetType().(*MetricAccessor_Classification_Logloss); ok {
		return x.Logloss
	}
	return nil
}

func (x *MetricAccessor_Classification) GetOneVsOther() *MetricAccessor_Classification_OneVsOther {
	if x, ok := x.GetType().(*MetricAccessor_Classification_OneVsOther_); ok {
		return x.OneVsOther
	}
	return nil
}

type isMetricAccessor_Classification_Type interface {
	isMetricAccessor_Classification_Type()
}

type MetricAccessor_Classification_Accuracy_ struct {
	Accuracy *MetricAccessor_Classification_Accuracy `protobuf:"bytes,1,opt,name=accuracy,oneof"`
}

type MetricAccessor_Classification_Logloss struct {
	Logloss *MetricAccessor_Classification_LogLoss `protobuf:"bytes,2,opt,name=logloss,oneof"`
}

type MetricAccessor_Classification_OneVsOther_ struct {
	OneVsOther *MetricAccessor_Classification_OneVsOther `protobuf:"bytes,3,opt,name=one_vs_other,json=oneVsOther,oneof"`
}

func (*MetricAccessor_Classification_Accuracy_) isMetricAccessor_Classification_Type() {}

func (*MetricAccessor_Classification_Logloss) isMetricAccessor_Classification_Type() {}

func (*MetricAccessor_Classification_OneVsOther_) isMetricAccessor_Classification_Type() {}

type MetricAccessor_Regression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*MetricAccessor_Regression_Rmse_
	Type isMetricAccessor_Regression_Type `protobuf_oneof:"Type"`
}

func (x *MetricAccessor_Regression) Reset() {
	*x = MetricAccessor_Regression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Regression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Regression) ProtoMessage() {}

func (x *MetricAccessor_Regression) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Regression.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Regression) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 1}
}

func (m *MetricAccessor_Regression) GetType() isMetricAccessor_Regression_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MetricAccessor_Regression) GetRmse() *MetricAccessor_Regression_Rmse {
	if x, ok := x.GetType().(*MetricAccessor_Regression_Rmse_); ok {
		return x.Rmse
	}
	return nil
}

type isMetricAccessor_Regression_Type interface {
	isMetricAccessor_Regression_Type()
}

type MetricAccessor_Regression_Rmse_ struct {
	Rmse *MetricAccessor_Regression_Rmse `protobuf:"bytes,1,opt,name=rmse,oneof"`
}

func (*MetricAccessor_Regression_Rmse_) isMetricAccessor_Regression_Type() {}

type MetricAccessor_Loss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Loss) Reset() {
	*x = MetricAccessor_Loss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Loss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Loss) ProtoMessage() {}

func (x *MetricAccessor_Loss) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Loss.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Loss) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 2}
}

type MetricAccessor_Ranking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*MetricAccessor_Ranking_Ndcg
	//	*MetricAccessor_Ranking_Mrr
	Type isMetricAccessor_Ranking_Type `protobuf_oneof:"Type"`
}

func (x *MetricAccessor_Ranking) Reset() {
	*x = MetricAccessor_Ranking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Ranking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Ranking) ProtoMessage() {}

func (x *MetricAccessor_Ranking) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Ranking.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Ranking) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 3}
}

func (m *MetricAccessor_Ranking) GetType() isMetricAccessor_Ranking_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MetricAccessor_Ranking) GetNdcg() *MetricAccessor_Ranking_NDCG {
	if x, ok := x.GetType().(*MetricAccessor_Ranking_Ndcg); ok {
		return x.Ndcg
	}
	return nil
}

func (x *MetricAccessor_Ranking) GetMrr() *MetricAccessor_Ranking_MRR {
	if x, ok := x.GetType().(*MetricAccessor_Ranking_Mrr); ok {
		return x.Mrr
	}
	return nil
}

type isMetricAccessor_Ranking_Type interface {
	isMetricAccessor_Ranking_Type()
}

type MetricAccessor_Ranking_Ndcg struct {
	Ndcg *MetricAccessor_Ranking_NDCG `protobuf:"bytes,1,opt,name=ndcg,oneof"`
}

type MetricAccessor_Ranking_Mrr struct {
	Mrr *MetricAccessor_Ranking_MRR `protobuf:"bytes,2,opt,name=mrr,oneof"`
}

func (*MetricAccessor_Ranking_Ndcg) isMetricAccessor_Ranking_Type() {}

func (*MetricAccessor_Ranking_Mrr) isMetricAccessor_Ranking_Type() {}

type MetricAccessor_Uplift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*MetricAccessor_Uplift_Qini_
	//	*MetricAccessor_Uplift_CateCalibration_
	Type isMetricAccessor_Uplift_Type `protobuf_oneof:"type"`
}

func (x *MetricAccessor_Uplift) Reset() {
	*x = MetricAccessor_Uplift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Uplift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Uplift) ProtoMessage() {}

func (x *MetricAccessor_Uplift) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Uplift.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Uplift) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 4}
}

func (m *MetricAccessor_Uplift) GetType() isMetricAccessor_Uplift_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MetricAccessor_Uplift) GetQini() *MetricAccessor_Uplift_Qini {
	if x, ok := x.GetType().(*MetricAccessor_Uplift_Qini_); ok {
		return x.Qini
	}
	return nil
}

func (x *MetricAccessor_Uplift) GetCateCalibration() *MetricAccessor_Uplift_CateCalibration {
	if x, ok := x.GetType().(*MetricAccessor_Uplift_CateCalibration_); ok {
		return x.CateCalibration
	}
	return nil
}

type isMetricAccessor_Uplift_Type interface {
	isMetricAccessor_Uplift_Type()
}

type MetricAccessor_Uplift_Qini_ struct {
	Qini *MetricAccessor_Uplift_Qini `protobuf:"bytes,1,opt,name=qini,oneof"`
}

type MetricAccessor_Uplift_CateCalibration_ struct {
	CateCalibration *MetricAccessor_Uplift_CateCalibration `protobuf:"bytes,2,opt,name=cate_calibration,json=cateCalibration,oneof"`
}

func (*MetricAccessor_Uplift_Qini_) isMetricAccessor_Uplift_Type() {}

func (*MetricAccessor_Uplift_CateCalibration_) isMetricAccessor_Uplift_Type() {}

type MetricAccessor_Classification_Accuracy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Classification_Accuracy) Reset() {
	*x = MetricAccessor_Classification_Accuracy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_Accuracy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_Accuracy) ProtoMessage() {}

func (x *MetricAccessor_Classification_Accuracy) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_Accuracy.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_Accuracy) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 0}
}

type MetricAccessor_Classification_LogLoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Classification_LogLoss) Reset() {
	*x = MetricAccessor_Classification_LogLoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_LogLoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_LogLoss) ProtoMessage() {}

func (x *MetricAccessor_Classification_LogLoss) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_LogLoss.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_LogLoss) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 1}
}

type MetricAccessor_Classification_OneVsOther struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositiveClass *string `protobuf:"bytes,1,opt,name=positive_class,json=positiveClass" json:"positive_class,omitempty"`
	// Types that are assignable to Type:
	//	*MetricAccessor_Classification_OneVsOther_Auc_
	//	*MetricAccessor_Classification_OneVsOther_PrAuc_
	//	*MetricAccessor_Classification_OneVsOther_Ap_
	//	*MetricAccessor_Classification_OneVsOther_PrecisionAtRecall_
	//	*MetricAccessor_Classification_OneVsOther_RecallAtPrecision_
	//	*MetricAccessor_Classification_OneVsOther_PrecisionAtVolume_
	//	*MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate_
	//	*MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall_
	Type isMetricAccessor_Classification_OneVsOther_Type `protobuf_oneof:"Type"`
}

func (x *MetricAccessor_Classification_OneVsOther) Reset() {
	*x = MetricAccessor_Classification_OneVsOther{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_OneVsOther) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_OneVsOther) ProtoMessage() {}

func (x *MetricAccessor_Classification_OneVsOther) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_OneVsOther.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_OneVsOther) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 2}
}

func (x *MetricAccessor_Classification_OneVsOther) GetPositiveClass() string {
	if x != nil && x.PositiveClass != nil {
		return *x.PositiveClass
	}
	return ""
}

func (m *MetricAccessor_Classification_OneVsOther) GetType() isMetricAccessor_Classification_OneVsOther_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MetricAccessor_Classification_OneVsOther) GetAuc() *MetricAccessor_Classification_OneVsOther_Auc {
	if x, ok := x.GetType().(*MetricAccessor_Classification_OneVsOther_Auc_); ok {
		return x.Auc
	}
	return nil
}

func (x *MetricAccessor_Classification_OneVsOther) GetPrAuc() *MetricAccessor_Classification_OneVsOther_PrAuc {
	if x, ok := x.GetType().(*MetricAccessor_Classification_OneVsOther_PrAuc_); ok {
		return x.PrAuc
	}
	return nil
}

func (x *MetricAccessor_Classification_OneVsOther) GetAp() *MetricAccessor_Classification_OneVsOther_Ap {
	if x, ok := x.GetType().(*MetricAccessor_Classification_OneVsOther_Ap_); ok {
		return x.Ap
	}
	return nil
}

func (x *MetricAccessor_Classification_OneVsOther) GetPrecisionAtRecall() *MetricAccessor_Classification_OneVsOther_PrecisionAtRecall {
	if x, ok := x.GetType().(*MetricAccessor_Classification_OneVsOther_PrecisionAtRecall_); ok {
		return x.PrecisionAtRecall
	}
	return nil
}

func (x *MetricAccessor_Classification_OneVsOther) GetRecallAtPrecision() *MetricAccessor_Classification_OneVsOther_RecallAtPrecision {
	if x, ok := x.GetType().(*MetricAccessor_Classification_OneVsOther_RecallAtPrecision_); ok {
		return x.RecallAtPrecision
	}
	return nil
}

func (x *MetricAccessor_Classification_OneVsOther) GetPrecisionAtVolume() *MetricAccessor_Classification_OneVsOther_PrecisionAtVolume {
	if x, ok := x.GetType().(*MetricAccessor_Classification_OneVsOther_PrecisionAtVolume_); ok {
		return x.PrecisionAtVolume
	}
	return nil
}

func (x *MetricAccessor_Classification_OneVsOther) GetRecallAtFalsePositiveRate() *MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate {
	if x, ok := x.GetType().(*MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate_); ok {
		return x.RecallAtFalsePositiveRate
	}
	return nil
}

func (x *MetricAccessor_Classification_OneVsOther) GetFalsePositiveRateAtRecall() *MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall {
	if x, ok := x.GetType().(*MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall_); ok {
		return x.FalsePositiveRateAtRecall
	}
	return nil
}

type isMetricAccessor_Classification_OneVsOther_Type interface {
	isMetricAccessor_Classification_OneVsOther_Type()
}

type MetricAccessor_Classification_OneVsOther_Auc_ struct {
	Auc *MetricAccessor_Classification_OneVsOther_Auc `protobuf:"bytes,2,opt,name=auc,oneof"`
}

type MetricAccessor_Classification_OneVsOther_PrAuc_ struct {
	PrAuc *MetricAccessor_Classification_OneVsOther_PrAuc `protobuf:"bytes,3,opt,name=pr_auc,json=prAuc,oneof"`
}

type MetricAccessor_Classification_OneVsOther_Ap_ struct {
	Ap *MetricAccessor_Classification_OneVsOther_Ap `protobuf:"bytes,4,opt,name=ap,oneof"`
}

type MetricAccessor_Classification_OneVsOther_PrecisionAtRecall_ struct {
	PrecisionAtRecall *MetricAccessor_Classification_OneVsOther_PrecisionAtRecall `protobuf:"bytes,5,opt,name=precision_at_recall,json=precisionAtRecall,oneof"`
}

type MetricAccessor_Classification_OneVsOther_RecallAtPrecision_ struct {
	RecallAtPrecision *MetricAccessor_Classification_OneVsOther_RecallAtPrecision `protobuf:"bytes,6,opt,name=recall_at_precision,json=recallAtPrecision,oneof"`
}

type MetricAccessor_Classification_OneVsOther_PrecisionAtVolume_ struct {
	PrecisionAtVolume *MetricAccessor_Classification_OneVsOther_PrecisionAtVolume `protobuf:"bytes,7,opt,name=precision_at_volume,json=precisionAtVolume,oneof"`
}

type MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate_ struct {
	RecallAtFalsePositiveRate *MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate `protobuf:"bytes,8,opt,name=recall_at_false_positive_rate,json=recallAtFalsePositiveRate,oneof"`
}

type MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall_ struct {
	FalsePositiveRateAtRecall *MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall `protobuf:"bytes,9,opt,name=false_positive_rate_at_recall,json=falsePositiveRateAtRecall,oneof"`
}

func (*MetricAccessor_Classification_OneVsOther_Auc_) isMetricAccessor_Classification_OneVsOther_Type() {
}

func (*MetricAccessor_Classification_OneVsOther_PrAuc_) isMetricAccessor_Classification_OneVsOther_Type() {
}

func (*MetricAccessor_Classification_OneVsOther_Ap_) isMetricAccessor_Classification_OneVsOther_Type() {
}

func (*MetricAccessor_Classification_OneVsOther_PrecisionAtRecall_) isMetricAccessor_Classification_OneVsOther_Type() {
}

func (*MetricAccessor_Classification_OneVsOther_RecallAtPrecision_) isMetricAccessor_Classification_OneVsOther_Type() {
}

func (*MetricAccessor_Classification_OneVsOther_PrecisionAtVolume_) isMetricAccessor_Classification_OneVsOther_Type() {
}

func (*MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate_) isMetricAccessor_Classification_OneVsOther_Type() {
}

func (*MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall_) isMetricAccessor_Classification_OneVsOther_Type() {
}

type MetricAccessor_Classification_OneVsOther_Auc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Classification_OneVsOther_Auc) Reset() {
	*x = MetricAccessor_Classification_OneVsOther_Auc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_OneVsOther_Auc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_OneVsOther_Auc) ProtoMessage() {}

func (x *MetricAccessor_Classification_OneVsOther_Auc) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_OneVsOther_Auc.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_OneVsOther_Auc) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 2, 0}
}

type MetricAccessor_Classification_OneVsOther_PrAuc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Classification_OneVsOther_PrAuc) Reset() {
	*x = MetricAccessor_Classification_OneVsOther_PrAuc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_OneVsOther_PrAuc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_OneVsOther_PrAuc) ProtoMessage() {}

func (x *MetricAccessor_Classification_OneVsOther_PrAuc) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_OneVsOther_PrAuc.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_OneVsOther_PrAuc) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 2, 1}
}

type MetricAccessor_Classification_OneVsOther_Ap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Classification_OneVsOther_Ap) Reset() {
	*x = MetricAccessor_Classification_OneVsOther_Ap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_OneVsOther_Ap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_OneVsOther_Ap) ProtoMessage() {}

func (x *MetricAccessor_Classification_OneVsOther_Ap) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_OneVsOther_Ap.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_OneVsOther_Ap) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 2, 2}
}

type MetricAccessor_Classification_OneVsOther_PrecisionAtRecall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recall *float32 `protobuf:"fixed32,1,opt,name=recall" json:"recall,omitempty"`
}

func (x *MetricAccessor_Classification_OneVsOther_PrecisionAtRecall) Reset() {
	*x = MetricAccessor_Classification_OneVsOther_PrecisionAtRecall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_OneVsOther_PrecisionAtRecall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_OneVsOther_PrecisionAtRecall) ProtoMessage() {}

func (x *MetricAccessor_Classification_OneVsOther_PrecisionAtRecall) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_OneVsOther_PrecisionAtRecall.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_OneVsOther_PrecisionAtRecall) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 2, 3}
}

func (x *MetricAccessor_Classification_OneVsOther_PrecisionAtRecall) GetRecall() float32 {
	if x != nil && x.Recall != nil {
		return *x.Recall
	}
	return 0
}

type MetricAccessor_Classification_OneVsOther_RecallAtPrecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision *float32 `protobuf:"fixed32,1,opt,name=precision" json:"precision,omitempty"`
}

func (x *MetricAccessor_Classification_OneVsOther_RecallAtPrecision) Reset() {
	*x = MetricAccessor_Classification_OneVsOther_RecallAtPrecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_OneVsOther_RecallAtPrecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_OneVsOther_RecallAtPrecision) ProtoMessage() {}

func (x *MetricAccessor_Classification_OneVsOther_RecallAtPrecision) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_OneVsOther_RecallAtPrecision.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_OneVsOther_RecallAtPrecision) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 2, 4}
}

func (x *MetricAccessor_Classification_OneVsOther_RecallAtPrecision) GetPrecision() float32 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

type MetricAccessor_Classification_OneVsOther_PrecisionAtVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume *float32 `protobuf:"fixed32,1,opt,name=volume" json:"volume,omitempty"`
}

func (x *MetricAccessor_Classification_OneVsOther_PrecisionAtVolume) Reset() {
	*x = MetricAccessor_Classification_OneVsOther_PrecisionAtVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_OneVsOther_PrecisionAtVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_OneVsOther_PrecisionAtVolume) ProtoMessage() {}

func (x *MetricAccessor_Classification_OneVsOther_PrecisionAtVolume) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_OneVsOther_PrecisionAtVolume.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_OneVsOther_PrecisionAtVolume) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 2, 5}
}

func (x *MetricAccessor_Classification_OneVsOther_PrecisionAtVolume) GetVolume() float32 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

type MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FalsePositiveRate *float32 `protobuf:"fixed32,1,opt,name=false_positive_rate,json=falsePositiveRate" json:"false_positive_rate,omitempty"`
}

func (x *MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate) Reset() {
	*x = MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate) ProtoMessage() {}

func (x *MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 2, 6}
}

func (x *MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate) GetFalsePositiveRate() float32 {
	if x != nil && x.FalsePositiveRate != nil {
		return *x.FalsePositiveRate
	}
	return 0
}

type MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recall *float32 `protobuf:"fixed32,1,opt,name=recall" json:"recall,omitempty"`
}

func (x *MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall) Reset() {
	*x = MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall) ProtoMessage() {}

func (x *MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 0, 2, 7}
}

func (x *MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall) GetRecall() float32 {
	if x != nil && x.Recall != nil {
		return *x.Recall
	}
	return 0
}

type MetricAccessor_Regression_Rmse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Regression_Rmse) Reset() {
	*x = MetricAccessor_Regression_Rmse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Regression_Rmse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Regression_Rmse) ProtoMessage() {}

func (x *MetricAccessor_Regression_Rmse) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Regression_Rmse.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Regression_Rmse) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 1, 0}
}

type MetricAccessor_Ranking_NDCG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Ranking_NDCG) Reset() {
	*x = MetricAccessor_Ranking_NDCG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Ranking_NDCG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Ranking_NDCG) ProtoMessage() {}

func (x *MetricAccessor_Ranking_NDCG) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Ranking_NDCG.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Ranking_NDCG) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 3, 0}
}

type MetricAccessor_Ranking_MRR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Ranking_MRR) Reset() {
	*x = MetricAccessor_Ranking_MRR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Ranking_MRR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Ranking_MRR) ProtoMessage() {}

func (x *MetricAccessor_Ranking_MRR) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Ranking_MRR.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Ranking_MRR) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 3, 1}
}

type MetricAccessor_Uplift_Qini struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Uplift_Qini) Reset() {
	*x = MetricAccessor_Uplift_Qini{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Uplift_Qini) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Uplift_Qini) ProtoMessage() {}

func (x *MetricAccessor_Uplift_Qini) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Uplift_Qini.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Uplift_Qini) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 4, 0}
}

type MetricAccessor_Uplift_CateCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricAccessor_Uplift_CateCalibration) Reset() {
	*x = MetricAccessor_Uplift_CateCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAccessor_Uplift_CateCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAccessor_Uplift_CateCalibration) ProtoMessage() {}

func (x *MetricAccessor_Uplift_CateCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAccessor_Uplift_CateCalibration.ProtoReflect.Descriptor instead.
func (*MetricAccessor_Uplift_CateCalibration) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{2, 4, 1}
}

type Roc_Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold *float32 `protobuf:"fixed32,1,opt,name=threshold" json:"threshold,omitempty"`
	// True/False Positive/Negative.
	Tp *float64 `protobuf:"fixed64,2,opt,name=tp" json:"tp,omitempty"`
	Fp *float64 `protobuf:"fixed64,3,opt,name=fp" json:"fp,omitempty"`
	Tn *float64 `protobuf:"fixed64,4,opt,name=tn" json:"tn,omitempty"`
	Fn *float64 `protobuf:"fixed64,5,opt,name=fn" json:"fn,omitempty"`
}

func (x *Roc_Point) Reset() {
	*x = Roc_Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Roc_Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Roc_Point) ProtoMessage() {}

func (x *Roc_Point) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Roc_Point.ProtoReflect.Descriptor instead.
func (*Roc_Point) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Roc_Point) GetThreshold() float32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *Roc_Point) GetTp() float64 {
	if x != nil && x.Tp != nil {
		return *x.Tp
	}
	return 0
}

func (x *Roc_Point) GetFp() float64 {
	if x != nil && x.Fp != nil {
		return *x.Fp
	}
	return 0
}

func (x *Roc_Point) GetTn() float64 {
	if x != nil && x.Tn != nil {
		return *x.Tn
	}
	return 0
}

func (x *Roc_Point) GetFn() float64 {
	if x != nil && x.Fn != nil {
		return *x.Fn
	}
	return 0
}

// Value of a metric X (e.g. recall) for a given other metric Y value (e.g.
// FPR).
type Roc_XAtYMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YMetricConstraint *float64 `protobuf:"fixed64,1,opt,name=y_metric_constraint,json=yMetricConstraint" json:"y_metric_constraint,omitempty"`
	XMetricValue      *float64 `protobuf:"fixed64,2,opt,name=x_metric_value,json=xMetricValue" json:"x_metric_value,omitempty"`
	Threshold         *float32 `protobuf:"fixed32,3,opt,name=threshold" json:"threshold,omitempty"`
}

func (x *Roc_XAtYMetric) Reset() {
	*x = Roc_XAtYMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Roc_XAtYMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Roc_XAtYMetric) ProtoMessage() {}

func (x *Roc_XAtYMetric) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Roc_XAtYMetric.ProtoReflect.Descriptor instead.
func (*Roc_XAtYMetric) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Roc_XAtYMetric) GetYMetricConstraint() float64 {
	if x != nil && x.YMetricConstraint != nil {
		return *x.YMetricConstraint
	}
	return 0
}

func (x *Roc_XAtYMetric) GetXMetricValue() float64 {
	if x != nil && x.XMetricValue != nil {
		return *x.XMetricValue
	}
	return 0
}

func (x *Roc_XAtYMetric) GetThreshold() float32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

var File_yggdrasil_decision_forests_metric_metric_proto protoreflect.FileDescriptor

var file_yggdrasil_decision_forests_metric_metric_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x27, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x79, 0x67, 0x67, 0x64, 0x72,
	0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x79,
	0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x2f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35,
	0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61,
	0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x0a,
	0x0a, 0x11, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x3a,
	0x0e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x73, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x55, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x66, 0x74,
	0x12, 0x32, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x15, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x04, 0x32, 0x30, 0x30, 0x30, 0x52, 0x14, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12,
	0x54, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0xf8, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x6f, 0x63, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x63, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x52, 0x6f, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x41, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1d,
	0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x19, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x46, 0x61, 0x6c,
	0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x1d, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x19, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x41, 0x74, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x1a, 0x4a, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x1a, 0x98, 0x01, 0x0a,
	0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0f, 0x6e, 0x64, 0x63, 0x67,
	0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x35, 0x52, 0x0e, 0x6e, 0x64, 0x63, 0x67, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x72, 0x72, 0x5f, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x31, 0x30,
	0x52, 0x0d, 0x6d, 0x72, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x6e,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x4f,
	0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x08, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x69, 0x66,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xfc, 0x11, 0x0a, 0x11, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52,
	0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4e, 0x6f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73,
	0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d,
	0x0a, 0x19, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x3a, 0x01, 0x30, 0x52, 0x17, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x67,
	0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x3a, 0x0e, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12,
	0x73, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61,
	0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72,
	0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a,
	0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a,
	0x06, 0x75, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x66, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x3f, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x75, 0x6d, 0x46, 0x6f, 0x6c, 0x64, 0x73, 0x1a, 0xfe, 0x01, 0x0a, 0x0e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x04, 0x72, 0x6f, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x63, 0x52, 0x04, 0x72,
	0x6f, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x73, 0x75,
	0x6d, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x1a, 0x92, 0x02, 0x0a, 0x0a, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x73, 0x75, 0x6d,
	0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x75,
	0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x10, 0x73, 0x75, 0x6d, 0x5f, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x3a, 0x01, 0x30, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x5f, 0x72, 0x6d, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x5f, 0x39, 0x35, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x6d, 0x73, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x39, 0x35, 0x70, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x72, 0x6d, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x39, 0x35, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1b, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x6d, 0x73,
	0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x39, 0x35, 0x70, 0x1a,
	0xd1, 0x04, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x04, 0x6e,
	0x64, 0x63, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x67, 0x67, 0x64,
	0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x6e, 0x64, 0x63, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x64, 0x63, 0x67,
	0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6e, 0x64, 0x63, 0x67, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x0a, 0x16, 0x6d, 0x61,
	0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x37, 0x0a, 0x17, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x64, 0x63, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x3a, 0x01, 0x30, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x64, 0x63, 0x67,
	0x12, 0x49, 0x0a, 0x03, 0x6d, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x03, 0x6d, 0x72, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x72, 0x72, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x72, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x5f, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x67, 0x67,
	0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x31, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x1a, 0x82, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x75, 0x75, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x75,
	0x75, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x71, 0x69, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x71, 0x69, 0x6e, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6e, 0x75, 0x6d, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xb6, 0x17, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x12, 0x70, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x79, 0x67,
	0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x67, 0x67, 0x64,
	0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x04, 0x6c,
	0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x67, 0x67, 0x64,
	0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x12,
	0x5b, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x06,
	0x75, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79,
	0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x1a, 0xd5, 0x0e, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x79, 0x67,
	0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x6a, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6c,
	0x6f, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x79, 0x67, 0x67, 0x64,
	0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x6c, 0x6f, 0x73, 0x73, 0x12, 0x75, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x79, 0x67, 0x67,
	0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x56, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0a, 0x6f, 0x6e, 0x65, 0x56, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x1a, 0x0a, 0x0a, 0x08, 0x41,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x1a, 0x09, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x4c, 0x6f,
	0x73, 0x73, 0x1a, 0xd1, 0x0b, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x56, 0x73, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x69, 0x0a, 0x03, 0x61, 0x75, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69,
	0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e,
	0x65, 0x56, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x63, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x75, 0x63, 0x12, 0x70, 0x0a, 0x06, 0x70, 0x72, 0x5f, 0x61, 0x75, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x56,
	0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x41, 0x75, 0x63, 0x48, 0x00, 0x52, 0x05,
	0x70, 0x72, 0x41, 0x75, 0x63, 0x12, 0x66, 0x0a, 0x02, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x54, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x56, 0x73, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x48, 0x00, 0x52, 0x02, 0x61, 0x70, 0x12, 0x95, 0x01,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x79, 0x67,
	0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x56, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x52,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x56,
	0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x41, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x95, 0x01,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x79, 0x67,
	0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x56, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x74, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e,
	0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x56, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x1d, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6b, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x56, 0x73, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x2e, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x41, 0x74, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x19,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x1a, 0x05, 0x0a, 0x03, 0x41, 0x75, 0x63,
	0x1a, 0x07, 0x0a, 0x05, 0x50, 0x72, 0x41, 0x75, 0x63, 0x1a, 0x04, 0x0a, 0x02, 0x41, 0x70, 0x1a,
	0x2b, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x52, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x1a, 0x31, 0x0a, 0x11,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x2b, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x1a, 0x4b, 0x0a, 0x19,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x33, 0x0a, 0x19, 0x46, 0x61, 0x6c,
	0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x06,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x7b,
	0x0a, 0x0a, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x04,
	0x72, 0x6d, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x79, 0x67, 0x67,
	0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x6d, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6d, 0x73, 0x65, 0x1a, 0x06, 0x0a, 0x04, 0x52,
	0x6d, 0x73, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x06, 0x0a, 0x04, 0x4c,
	0x6f, 0x73, 0x73, 0x1a, 0xd5, 0x01, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x5a, 0x0a, 0x04, 0x6e, 0x64, 0x63, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4e,
	0x44, 0x43, 0x47, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x64, 0x63, 0x67, 0x12, 0x57, 0x0a, 0x03, 0x6d,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72,
	0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x52, 0x52, 0x48, 0x00, 0x52,
	0x03, 0x6d, 0x72, 0x72, 0x1a, 0x06, 0x0a, 0x04, 0x4e, 0x44, 0x43, 0x47, 0x1a, 0x05, 0x0a, 0x03,
	0x4d, 0x52, 0x52, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x83, 0x02, 0x0a, 0x06,
	0x55, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x71, 0x69, 0x6e, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x70,
	0x6c, 0x69, 0x66, 0x74, 0x2e, 0x51, 0x69, 0x6e, 0x69, 0x48, 0x00, 0x52, 0x04, 0x71, 0x69, 0x6e,
	0x69, 0x12, 0x7b, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x79, 0x67,
	0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x06,
	0x0a, 0x04, 0x51, 0x69, 0x6e, 0x69, 0x1a, 0x11, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x22, 0xa6, 0x09, 0x0a, 0x03, 0x52, 0x6f,
	0x63, 0x12, 0x48, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x63, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x75, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x75, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x72,
	0x5f, 0x61, 0x75, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x41, 0x75,
	0x63, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x61,
	0x70, 0x12, 0x67, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x63, 0x2e, 0x58, 0x41, 0x74,
	0x59, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x11, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x13, 0x72, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61,
	0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x6f, 0x63, 0x2e, 0x58, 0x41, 0x74, 0x59, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x11, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x63, 0x2e, 0x58,
	0x41, 0x74, 0x59, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x11, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x1d,
	0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x63, 0x2e, 0x58, 0x41, 0x74, 0x59, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x19, 0x72, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x79, 0x0a, 0x1d, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x63, 0x2e, 0x58, 0x41, 0x74,
	0x59, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x19, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x41, 0x74, 0x52, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x1a, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x39, 0x35, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73,
	0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x6f, 0x63, 0x52, 0x17, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x39, 0x35, 0x70, 0x12, 0x69, 0x0a,
	0x1a, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x39, 0x35, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x63, 0x52,
	0x17, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x39, 0x35, 0x70, 0x1a, 0x65, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x66, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x66, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x66, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x66, 0x6e, 0x1a,
	0x80, 0x01, 0x0a, 0x0a, 0x58, 0x41, 0x74, 0x59, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2e,
	0x0a, 0x13, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x78, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x39,
	0x35, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72,
	0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64, 0x39, 0x35, 0x70, 0x22, 0x34, 0x0a, 0x06,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x70, 0x70,
	0x65, 0x72,
}

var (
	file_yggdrasil_decision_forests_metric_metric_proto_rawDescOnce sync.Once
	file_yggdrasil_decision_forests_metric_metric_proto_rawDescData = file_yggdrasil_decision_forests_metric_metric_proto_rawDesc
)

func file_yggdrasil_decision_forests_metric_metric_proto_rawDescGZIP() []byte {
	file_yggdrasil_decision_forests_metric_metric_proto_rawDescOnce.Do(func() {
		file_yggdrasil_decision_forests_metric_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_yggdrasil_decision_forests_metric_metric_proto_rawDescData)
	})
	return file_yggdrasil_decision_forests_metric_metric_proto_rawDescData
}

var file_yggdrasil_decision_forests_metric_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_yggdrasil_decision_forests_metric_metric_proto_goTypes = []interface{}{
	(*EvaluationOptions)(nil),                                                  // 0: yggdrasil_decision_forests.metric.proto.EvaluationOptions
	(*EvaluationResults)(nil),                                                  // 1: yggdrasil_decision_forests.metric.proto.EvaluationResults
	(*MetricAccessor)(nil),                                                     // 2: yggdrasil_decision_forests.metric.proto.MetricAccessor
	(*Roc)(nil),                                                                // 3: yggdrasil_decision_forests.metric.proto.Roc
	(*MetricEstimate)(nil),                                                     // 4: yggdrasil_decision_forests.metric.proto.MetricEstimate
	(*Bounds)(nil),                                                             // 5: yggdrasil_decision_forests.metric.proto.Bounds
	(*EvaluationOptions_Classification)(nil),                                   // 6: yggdrasil_decision_forests.metric.proto.EvaluationOptions.Classification
	(*EvaluationOptions_Regression)(nil),                                       // 7: yggdrasil_decision_forests.metric.proto.EvaluationOptions.Regression
	(*EvaluationOptions_Ranking)(nil),                                          // 8: yggdrasil_decision_forests.metric.proto.EvaluationOptions.Ranking
	(*EvaluationOptions_Uplift)(nil),                                           // 9: yggdrasil_decision_forests.metric.proto.EvaluationOptions.Uplift
	(*EvaluationResults_Classification)(nil),                                   // 10: yggdrasil_decision_forests.metric.proto.EvaluationResults.Classification
	(*EvaluationResults_Regression)(nil),                                       // 11: yggdrasil_decision_forests.metric.proto.EvaluationResults.Regression
	(*EvaluationResults_Ranking)(nil),                                          // 12: yggdrasil_decision_forests.metric.proto.EvaluationResults.Ranking
	(*EvaluationResults_Uplift)(nil),                                           // 13: yggdrasil_decision_forests.metric.proto.EvaluationResults.Uplift
	(*MetricAccessor_Classification)(nil),                                      // 14: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification
	(*MetricAccessor_Regression)(nil),                                          // 15: yggdrasil_decision_forests.metric.proto.MetricAccessor.Regression
	(*MetricAccessor_Loss)(nil),                                                // 16: yggdrasil_decision_forests.metric.proto.MetricAccessor.Loss
	(*MetricAccessor_Ranking)(nil),                                             // 17: yggdrasil_decision_forests.metric.proto.MetricAccessor.Ranking
	(*MetricAccessor_Uplift)(nil),                                              // 18: yggdrasil_decision_forests.metric.proto.MetricAccessor.Uplift
	(*MetricAccessor_Classification_Accuracy)(nil),                             // 19: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.Accuracy
	(*MetricAccessor_Classification_LogLoss)(nil),                              // 20: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.LogLoss
	(*MetricAccessor_Classification_OneVsOther)(nil),                           // 21: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther
	(*MetricAccessor_Classification_OneVsOther_Auc)(nil),                       // 22: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.Auc
	(*MetricAccessor_Classification_OneVsOther_PrAuc)(nil),                     // 23: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.PrAuc
	(*MetricAccessor_Classification_OneVsOther_Ap)(nil),                        // 24: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.Ap
	(*MetricAccessor_Classification_OneVsOther_PrecisionAtRecall)(nil),         // 25: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.PrecisionAtRecall
	(*MetricAccessor_Classification_OneVsOther_RecallAtPrecision)(nil),         // 26: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.RecallAtPrecision
	(*MetricAccessor_Classification_OneVsOther_PrecisionAtVolume)(nil),         // 27: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.PrecisionAtVolume
	(*MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate)(nil), // 28: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.RecallAtFalsePositiveRate
	(*MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall)(nil), // 29: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.FalsePositiveRateAtRecall
	(*MetricAccessor_Regression_Rmse)(nil),                                     // 30: yggdrasil_decision_forests.metric.proto.MetricAccessor.Regression.Rmse
	(*MetricAccessor_Ranking_NDCG)(nil),                                        // 31: yggdrasil_decision_forests.metric.proto.MetricAccessor.Ranking.NDCG
	(*MetricAccessor_Ranking_MRR)(nil),                                         // 32: yggdrasil_decision_forests.metric.proto.MetricAccessor.Ranking.MRR
	(*MetricAccessor_Uplift_Qini)(nil),                                         // 33: yggdrasil_decision_forests.metric.proto.MetricAccessor.Uplift.Qini
	(*MetricAccessor_Uplift_CateCalibration)(nil),                              // 34: yggdrasil_decision_forests.metric.proto.MetricAccessor.Uplift.CateCalibration
	(*Roc_Point)(nil),                                                          // 35: yggdrasil_decision_forests.metric.proto.Roc.Point
	(*Roc_XAtYMetric)(nil),                                                     // 36: yggdrasil_decision_forests.metric.proto.Roc.XAtYMetric
	(proto.Task)(0),                                                            // 37: yggdrasil_decision_forests.model.proto.Task
	(*proto1.WeightDefinition)(nil),                                            // 38: yggdrasil_decision_forests.dataset.proto.WeightDefinition
	(*proto.Prediction)(nil),                                                   // 39: yggdrasil_decision_forests.model.proto.Prediction
	(*proto1.Column)(nil),                                                      // 40: yggdrasil_decision_forests.dataset.proto.Column
	(*proto2.IntegersConfusionMatrixDouble)(nil),                               // 41: yggdrasil_decision_forests.utils.proto.IntegersConfusionMatrixDouble
}
var file_yggdrasil_decision_forests_metric_metric_proto_depIdxs = []int32{
	37, // 0: yggdrasil_decision_forests.metric.proto.EvaluationOptions.task:type_name -> yggdrasil_decision_forests.model.proto.Task
	6,  // 1: yggdrasil_decision_forests.metric.proto.EvaluationOptions.classification:type_name -> yggdrasil_decision_forests.metric.proto.EvaluationOptions.Classification
	7,  // 2: yggdrasil_decision_forests.metric.proto.EvaluationOptions.regression:type_name -> yggdrasil_decision_forests.metric.proto.EvaluationOptions.Regression
	8,  // 3: yggdrasil_decision_forests.metric.proto.EvaluationOptions.ranking:type_name -> yggdrasil_decision_forests.metric.proto.EvaluationOptions.Ranking
	9,  // 4: yggdrasil_decision_forests.metric.proto.EvaluationOptions.uplift:type_name -> yggdrasil_decision_forests.metric.proto.EvaluationOptions.Uplift
	38, // 5: yggdrasil_decision_forests.metric.proto.EvaluationOptions.weights:type_name -> yggdrasil_decision_forests.dataset.proto.WeightDefinition
	39, // 6: yggdrasil_decision_forests.metric.proto.EvaluationResults.sampled_predictions:type_name -> yggdrasil_decision_forests.model.proto.Prediction
	37, // 7: yggdrasil_decision_forests.metric.proto.EvaluationResults.task:type_name -> yggdrasil_decision_forests.model.proto.Task
	10, // 8: yggdrasil_decision_forests.metric.proto.EvaluationResults.classification:type_name -> yggdrasil_decision_forests.metric.proto.EvaluationResults.Classification
	11, // 9: yggdrasil_decision_forests.metric.proto.EvaluationResults.regression:type_name -> yggdrasil_decision_forests.metric.proto.EvaluationResults.Regression
	12, // 10: yggdrasil_decision_forests.metric.proto.EvaluationResults.ranking:type_name -> yggdrasil_decision_forests.metric.proto.EvaluationResults.Ranking
	13, // 11: yggdrasil_decision_forests.metric.proto.EvaluationResults.uplift:type_name -> yggdrasil_decision_forests.metric.proto.EvaluationResults.Uplift
	40, // 12: yggdrasil_decision_forests.metric.proto.EvaluationResults.label_column:type_name -> yggdrasil_decision_forests.dataset.proto.Column
	14, // 13: yggdrasil_decision_forests.metric.proto.MetricAccessor.classification:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification
	15, // 14: yggdrasil_decision_forests.metric.proto.MetricAccessor.regression:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Regression
	16, // 15: yggdrasil_decision_forests.metric.proto.MetricAccessor.loss:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Loss
	17, // 16: yggdrasil_decision_forests.metric.proto.MetricAccessor.ranking:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Ranking
	18, // 17: yggdrasil_decision_forests.metric.proto.MetricAccessor.uplift:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Uplift
	35, // 18: yggdrasil_decision_forests.metric.proto.Roc.curve:type_name -> yggdrasil_decision_forests.metric.proto.Roc.Point
	36, // 19: yggdrasil_decision_forests.metric.proto.Roc.precision_at_recall:type_name -> yggdrasil_decision_forests.metric.proto.Roc.XAtYMetric
	36, // 20: yggdrasil_decision_forests.metric.proto.Roc.recall_at_precision:type_name -> yggdrasil_decision_forests.metric.proto.Roc.XAtYMetric
	36, // 21: yggdrasil_decision_forests.metric.proto.Roc.precision_at_volume:type_name -> yggdrasil_decision_forests.metric.proto.Roc.XAtYMetric
	36, // 22: yggdrasil_decision_forests.metric.proto.Roc.recall_at_false_positive_rate:type_name -> yggdrasil_decision_forests.metric.proto.Roc.XAtYMetric
	36, // 23: yggdrasil_decision_forests.metric.proto.Roc.false_positive_rate_at_recall:type_name -> yggdrasil_decision_forests.metric.proto.Roc.XAtYMetric
	3,  // 24: yggdrasil_decision_forests.metric.proto.Roc.bootstrap_lower_bounds_95p:type_name -> yggdrasil_decision_forests.metric.proto.Roc
	3,  // 25: yggdrasil_decision_forests.metric.proto.Roc.bootstrap_upper_bounds_95p:type_name -> yggdrasil_decision_forests.metric.proto.Roc
	5,  // 26: yggdrasil_decision_forests.metric.proto.MetricEstimate.bootstrap_based_95p:type_name -> yggdrasil_decision_forests.metric.proto.Bounds
	41, // 27: yggdrasil_decision_forests.metric.proto.EvaluationResults.Classification.confusion:type_name -> yggdrasil_decision_forests.utils.proto.IntegersConfusionMatrixDouble
	3,  // 28: yggdrasil_decision_forests.metric.proto.EvaluationResults.Classification.rocs:type_name -> yggdrasil_decision_forests.metric.proto.Roc
	4,  // 29: yggdrasil_decision_forests.metric.proto.EvaluationResults.Ranking.ndcg:type_name -> yggdrasil_decision_forests.metric.proto.MetricEstimate
	4,  // 30: yggdrasil_decision_forests.metric.proto.EvaluationResults.Ranking.mrr:type_name -> yggdrasil_decision_forests.metric.proto.MetricEstimate
	4,  // 31: yggdrasil_decision_forests.metric.proto.EvaluationResults.Ranking.precision_at_1:type_name -> yggdrasil_decision_forests.metric.proto.MetricEstimate
	19, // 32: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.accuracy:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.Accuracy
	20, // 33: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.logloss:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.LogLoss
	21, // 34: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.one_vs_other:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther
	30, // 35: yggdrasil_decision_forests.metric.proto.MetricAccessor.Regression.rmse:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Regression.Rmse
	31, // 36: yggdrasil_decision_forests.metric.proto.MetricAccessor.Ranking.ndcg:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Ranking.NDCG
	32, // 37: yggdrasil_decision_forests.metric.proto.MetricAccessor.Ranking.mrr:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Ranking.MRR
	33, // 38: yggdrasil_decision_forests.metric.proto.MetricAccessor.Uplift.qini:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Uplift.Qini
	34, // 39: yggdrasil_decision_forests.metric.proto.MetricAccessor.Uplift.cate_calibration:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Uplift.CateCalibration
	22, // 40: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.auc:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.Auc
	23, // 41: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.pr_auc:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.PrAuc
	24, // 42: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.ap:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.Ap
	25, // 43: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.precision_at_recall:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.PrecisionAtRecall
	26, // 44: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.recall_at_precision:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.RecallAtPrecision
	27, // 45: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.precision_at_volume:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.PrecisionAtVolume
	28, // 46: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.recall_at_false_positive_rate:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.RecallAtFalsePositiveRate
	29, // 47: yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.false_positive_rate_at_recall:type_name -> yggdrasil_decision_forests.metric.proto.MetricAccessor.Classification.OneVsOther.FalsePositiveRateAtRecall
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_yggdrasil_decision_forests_metric_metric_proto_init() }
func file_yggdrasil_decision_forests_metric_metric_proto_init() {
	if File_yggdrasil_decision_forests_metric_metric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Roc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricEstimate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationOptions_Classification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationOptions_Regression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationOptions_Ranking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationOptions_Uplift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationResults_Classification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationResults_Regression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationResults_Ranking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationResults_Uplift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Regression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Loss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Ranking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Uplift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_Accuracy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_LogLoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_OneVsOther); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_OneVsOther_Auc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_OneVsOther_PrAuc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_OneVsOther_Ap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_OneVsOther_PrecisionAtRecall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_OneVsOther_RecallAtPrecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_OneVsOther_PrecisionAtVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Regression_Rmse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Ranking_NDCG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Ranking_MRR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Uplift_Qini); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAccessor_Uplift_CateCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Roc_Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Roc_XAtYMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EvaluationOptions_Classification_)(nil),
		(*EvaluationOptions_Regression_)(nil),
		(*EvaluationOptions_Ranking_)(nil),
		(*EvaluationOptions_Uplift_)(nil),
	}
	file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*EvaluationResults_Classification_)(nil),
		(*EvaluationResults_Regression_)(nil),
		(*EvaluationResults_Ranking_)(nil),
		(*EvaluationResults_Uplift_)(nil),
	}
	file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*MetricAccessor_Classification_)(nil),
		(*MetricAccessor_Regression_)(nil),
		(*MetricAccessor_Loss_)(nil),
		(*MetricAccessor_Ranking_)(nil),
		(*MetricAccessor_Uplift_)(nil),
	}
	file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*MetricAccessor_Classification_Accuracy_)(nil),
		(*MetricAccessor_Classification_Logloss)(nil),
		(*MetricAccessor_Classification_OneVsOther_)(nil),
	}
	file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*MetricAccessor_Regression_Rmse_)(nil),
	}
	file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*MetricAccessor_Ranking_Ndcg)(nil),
		(*MetricAccessor_Ranking_Mrr)(nil),
	}
	file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*MetricAccessor_Uplift_Qini_)(nil),
		(*MetricAccessor_Uplift_CateCalibration_)(nil),
	}
	file_yggdrasil_decision_forests_metric_metric_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*MetricAccessor_Classification_OneVsOther_Auc_)(nil),
		(*MetricAccessor_Classification_OneVsOther_PrAuc_)(nil),
		(*MetricAccessor_Classification_OneVsOther_Ap_)(nil),
		(*MetricAccessor_Classification_OneVsOther_PrecisionAtRecall_)(nil),
		(*MetricAccessor_Classification_OneVsOther_RecallAtPrecision_)(nil),
		(*MetricAccessor_Classification_OneVsOther_PrecisionAtVolume_)(nil),
		(*MetricAccessor_Classification_OneVsOther_RecallAtFalsePositiveRate_)(nil),
		(*MetricAccessor_Classification_OneVsOther_FalsePositiveRateAtRecall_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yggdrasil_decision_forests_metric_metric_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yggdrasil_decision_forests_metric_metric_proto_goTypes,
		DependencyIndexes: file_yggdrasil_decision_forests_metric_metric_proto_depIdxs,
		MessageInfos:      file_yggdrasil_decision_forests_metric_metric_proto_msgTypes,
	}.Build()
	File_yggdrasil_decision_forests_metric_metric_proto = out.File
	file_yggdrasil_decision_forests_metric_metric_proto_rawDesc = nil
	file_yggdrasil_decision_forests_metric_metric_proto_goTypes = nil
	file_yggdrasil_decision_forests_metric_metric_proto_depIdxs = nil
}
