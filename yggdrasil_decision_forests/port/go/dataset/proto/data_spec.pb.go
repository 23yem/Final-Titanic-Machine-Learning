//
// Copyright 2022 Google LLC.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// A dataspec is a definition of the columns of a dataset (e.g. A
// NUMERICAL column named "age" and a CATEGORICAL column named "CITY"). Dataspec
// also contains various information needed to feed a dataset to a model. For
// example: The dictionary "string->integer" for categorical attributes stored
// as strings, or the tokenizer configuration for categorical list attributes
// also stored as strings. Finally, the dataspec contains various useful
// information such as the fraction of NA ("not available", or "missing")
// values, the mean value of numerical attributes, etc.
//
// While the dataspec can be defined by the user, it is better to use the
// automatic dataspec builder. This program scans a dataset and generate the
// most likely dataspec. The user can give indications to the dataspec builder
// using a DataSpecificationGuide proto.
//
// Currently supported formats to compute automatically dataspec are: Csv,
// tensorflow.Example+recordIO and tensorflow.Example+sstable. In a future
// version, dataspecs will support ColumnIO and Proto (using reflexion).
// Computing the dataspec can be done locally or using flume.
//
// Naming convention (in the code and in the protos):
//  "cat" : Categorical (for categorical attribute).
//  "num": Numerical (for numerical attribute).
//  "col:" Column.
//  "idx": Index. "example_idx" or "sample_idx" are index of example/sample in
//    the dataset. "column_idx" is a column index (as defined in the dataspec).
//  "local_idx": Local index. Index different from the main "index". For
//    example "local_col_idxs" is a list of column index. However, the indexing
//    is different from the dataspec index (e.g. in this case, this is probably
//    a dense index of the column loaded in memory for a given computation).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: yggdrasil_decision_forests/dataset/data_spec.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of dataset columns.
type ColumnType int32

const (
	ColumnType_UNKNOWN               ColumnType = 0
	ColumnType_NUMERICAL             ColumnType = 1
	ColumnType_NUMERICAL_SET         ColumnType = 2
	ColumnType_NUMERICAL_LIST        ColumnType = 3
	ColumnType_CATEGORICAL           ColumnType = 4
	ColumnType_CATEGORICAL_SET       ColumnType = 5
	ColumnType_CATEGORICAL_LIST      ColumnType = 6
	ColumnType_BOOLEAN               ColumnType = 7
	ColumnType_STRING                ColumnType = 8
	ColumnType_DISCRETIZED_NUMERICAL ColumnType = 9
	ColumnType_HASH                  ColumnType = 10
)

// Enum value maps for ColumnType.
var (
	ColumnType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "NUMERICAL",
		2:  "NUMERICAL_SET",
		3:  "NUMERICAL_LIST",
		4:  "CATEGORICAL",
		5:  "CATEGORICAL_SET",
		6:  "CATEGORICAL_LIST",
		7:  "BOOLEAN",
		8:  "STRING",
		9:  "DISCRETIZED_NUMERICAL",
		10: "HASH",
	}
	ColumnType_value = map[string]int32{
		"UNKNOWN":               0,
		"NUMERICAL":             1,
		"NUMERICAL_SET":         2,
		"NUMERICAL_LIST":        3,
		"CATEGORICAL":           4,
		"CATEGORICAL_SET":       5,
		"CATEGORICAL_LIST":      6,
		"BOOLEAN":               7,
		"STRING":                8,
		"DISCRETIZED_NUMERICAL": 9,
		"HASH":                  10,
	}
)

func (x ColumnType) Enum() *ColumnType {
	p := new(ColumnType)
	*p = x
	return p
}

func (x ColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_enumTypes[0].Descriptor()
}

func (ColumnType) Type() protoreflect.EnumType {
	return &file_yggdrasil_decision_forests_dataset_data_spec_proto_enumTypes[0]
}

func (x ColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColumnType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColumnType(num)
	return nil
}

// Deprecated: Use ColumnType.Descriptor instead.
func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{0}
}

// Possible string tokenization algorithms.
type Tokenizer_Splitter int32

const (
	Tokenizer_INVALID Tokenizer_Splitter = 0
	// Split a string according to the user specified separator.
	Tokenizer_SEPARATOR Tokenizer_Splitter = 1
	// Split a string by extracting token using the user specified regular
	// expression.
	Tokenizer_REGEX_MATCH Tokenizer_Splitter = 2
	// Split a string into individual characters. Does not remove spaces and
	// non-printable characters.
	Tokenizer_CHARACTER Tokenizer_Splitter = 3
)

// Enum value maps for Tokenizer_Splitter.
var (
	Tokenizer_Splitter_name = map[int32]string{
		0: "INVALID",
		1: "SEPARATOR",
		2: "REGEX_MATCH",
		3: "CHARACTER",
	}
	Tokenizer_Splitter_value = map[string]int32{
		"INVALID":     0,
		"SEPARATOR":   1,
		"REGEX_MATCH": 2,
		"CHARACTER":   3,
	}
)

func (x Tokenizer_Splitter) Enum() *Tokenizer_Splitter {
	p := new(Tokenizer_Splitter)
	*p = x
	return p
}

func (x Tokenizer_Splitter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tokenizer_Splitter) Descriptor() protoreflect.EnumDescriptor {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_enumTypes[1].Descriptor()
}

func (Tokenizer_Splitter) Type() protoreflect.EnumType {
	return &file_yggdrasil_decision_forests_dataset_data_spec_proto_enumTypes[1]
}

func (x Tokenizer_Splitter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Tokenizer_Splitter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Tokenizer_Splitter(num)
	return nil
}

// Deprecated: Use Tokenizer_Splitter.Descriptor instead.
func (Tokenizer_Splitter) EnumDescriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{7, 0}
}

// Specification of the columns of a dataset. List the available columns (
// including their name, type, and extra information e.g. dictionaries).
type DataSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The columns.
	Columns []*Column `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	// The number of rows of the dataset used to create this dataset (if a
	// dataset was used).
	CreatedNumRows *int64 `protobuf:"varint,2,opt,name=created_num_rows,json=createdNumRows" json:"created_num_rows,omitempty"`
	// Meta-data about features that were unstacked e.g. with the
	// "unstack_numerical_set_as_numericals" control field.
	Unstackeds []*Unstacked `protobuf:"bytes,3,rep,name=unstackeds" json:"unstackeds,omitempty"`
}

func (x *DataSpecification) Reset() {
	*x = DataSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSpecification) ProtoMessage() {}

func (x *DataSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSpecification.ProtoReflect.Descriptor instead.
func (*DataSpecification) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{0}
}

func (x *DataSpecification) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DataSpecification) GetCreatedNumRows() int64 {
	if x != nil && x.CreatedNumRows != nil {
		return *x.CreatedNumRows
	}
	return 0
}

func (x *DataSpecification) GetUnstackeds() []*Unstacked {
	if x != nil {
		return x.Unstackeds
	}
	return nil
}

// Definition of a column in a dataset.
type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of data.
	Type *ColumnType `protobuf:"varint,1,opt,name=type,enum=yggdrasil_decision_forests.dataset.proto.ColumnType,def=0" json:"type,omitempty"`
	// Column unique name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// If true, the type is set manually by the user (instead of been
	// automatically detected). This field is purely used for debugging purpose
	// and has no impact on the computation. Note that if a column guide matches
	// this column, and if this column guide does not contain a type,
	// is_manual_type is set to false (as if there were no column guide match).
	IsManualType *bool `protobuf:"varint,3,opt,name=is_manual_type,json=isManualType,def=0" json:"is_manual_type,omitempty"`
	// Tokenization. For non-integerized list or sets columns (numerical or
	// categorical).
	Tokenizer *Tokenizer `protobuf:"bytes,4,opt,name=tokenizer" json:"tokenizer,omitempty"`
	// Data for numerical (simple, list or set) attribute types.
	Numerical *NumericalSpec `protobuf:"bytes,5,opt,name=numerical" json:"numerical,omitempty"`
	// Data for categorical (simple, list or set) attribute types.
	Categorical *CategoricalSpec `protobuf:"bytes,6,opt,name=categorical" json:"categorical,omitempty"`
	// Number of NAs (i.e. not available) record when building the dataspec.
	CountNas *int64 `protobuf:"varint,7,opt,name=count_nas,json=countNas,def=0" json:"count_nas,omitempty"`
	// Numerical value stored as an index + a dictionary.
	DiscretizedNumerical *DiscretizedNumericalSpec `protobuf:"bytes,8,opt,name=discretized_numerical,json=discretizedNumerical" json:"discretized_numerical,omitempty"`
	// Data for boolean attribute types.
	Boolean *BooleanSpec `protobuf:"bytes,9,opt,name=boolean" json:"boolean,omitempty"`
	// For all the types defined as a collection of multiple values.
	MultiValues *MultiValuesSpec `protobuf:"bytes,10,opt,name=multi_values,json=multiValues" json:"multi_values,omitempty"`
	// Is the feature derived from unstacking a multi-dimensional dimension?
	IsUnstacked *bool `protobuf:"varint,11,opt,name=is_unstacked,json=isUnstacked,def=0" json:"is_unstacked,omitempty"`
}

// Default values for Column fields.
const (
	Default_Column_Type         = ColumnType_UNKNOWN
	Default_Column_IsManualType = bool(false)
	Default_Column_CountNas     = int64(0)
	Default_Column_IsUnstacked  = bool(false)
)

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{1}
}

func (x *Column) GetType() ColumnType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_Column_Type
}

func (x *Column) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Column) GetIsManualType() bool {
	if x != nil && x.IsManualType != nil {
		return *x.IsManualType
	}
	return Default_Column_IsManualType
}

func (x *Column) GetTokenizer() *Tokenizer {
	if x != nil {
		return x.Tokenizer
	}
	return nil
}

func (x *Column) GetNumerical() *NumericalSpec {
	if x != nil {
		return x.Numerical
	}
	return nil
}

func (x *Column) GetCategorical() *CategoricalSpec {
	if x != nil {
		return x.Categorical
	}
	return nil
}

func (x *Column) GetCountNas() int64 {
	if x != nil && x.CountNas != nil {
		return *x.CountNas
	}
	return Default_Column_CountNas
}

func (x *Column) GetDiscretizedNumerical() *DiscretizedNumericalSpec {
	if x != nil {
		return x.DiscretizedNumerical
	}
	return nil
}

func (x *Column) GetBoolean() *BooleanSpec {
	if x != nil {
		return x.Boolean
	}
	return nil
}

func (x *Column) GetMultiValues() *MultiValuesSpec {
	if x != nil {
		return x.MultiValues
	}
	return nil
}

func (x *Column) GetIsUnstacked() bool {
	if x != nil && x.IsUnstacked != nil {
		return *x.IsUnstacked
	}
	return Default_Column_IsUnstacked
}

// Specification of a categorical column.
type CategoricalSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most frequent value.
	MostFrequentValue *int64 `protobuf:"varint,1,opt,name=most_frequent_value,json=mostFrequentValue" json:"most_frequent_value,omitempty"`
	// The number of unique values (including the reserved OOD(=0) value).
	// All the values should be 0 <= value < number_of_unique_values.
	//
	// The value "0" is reserved for the out-of-dictionary value. Therefore, in
	// the case of a categorical column with two possible values "X" and "Y", the
	// proto will be:
	//
	//   number_of_unique_values = 3
	//   is_already_integerized=false
	//   items { key: "OOD" value { index: 0 }}
	//   items { key: "X" value { index: 1 }}
	//   items { key: "Y" value { index: 2 }}
	//
	// Missing values are implicit and take index=-1. They don't need to be
	// specified in "items".
	NumberOfUniqueValues *int64 `protobuf:"varint,2,opt,name=number_of_unique_values,json=numberOfUniqueValues" json:"number_of_unique_values,omitempty"`
	// Minimum frequency of a value not to be replaced by the <OOD> special
	// value. Used when computing value dictionary.
	MinValueCount *int32 `protobuf:"varint,3,opt,name=min_value_count,json=minValueCount,def=5" json:"min_value_count,omitempty"`
	// Maximum number of unique categorical values. If more values are present,
	// the less frequent values are considered <OOD>. Used when computing value
	// dictionary. If "max_number_of_unique_values" == -1, the items are not
	// pruned.
	MaxNumberOfUniqueValues *int32 `protobuf:"varint,4,opt,name=max_number_of_unique_values,json=maxNumberOfUniqueValues,def=2000" json:"max_number_of_unique_values,omitempty"`
	// If true, values are interpreted directed as an integer. If false, values
	// are indexed in the "items" dictionary.
	IsAlreadyIntegerized *bool `protobuf:"varint,5,opt,name=is_already_integerized,json=isAlreadyIntegerized" json:"is_already_integerized,omitempty"`
	// Dictionary of values. Only available if is_already_integerized=false. In
	// this case, items.size() is equal to number_of_unique_values.
	Items map[string]*CategoricalSpec_VocabValue `protobuf:"bytes,7,rep,name=items" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If true, integer categorical values  provided by the user have been offset
	// by 1. Such pre-processing is done in TensorFlow Decision Forests. See
	// "CATEGORICAL_INTEGER_OFFSET".
	OffsetValueByOneDuringTraining *bool `protobuf:"varint,8,opt,name=offset_value_by_one_during_training,json=offsetValueByOneDuringTraining,def=0" json:"offset_value_by_one_during_training,omitempty"`
}

// Default values for CategoricalSpec fields.
const (
	Default_CategoricalSpec_MinValueCount                  = int32(5)
	Default_CategoricalSpec_MaxNumberOfUniqueValues        = int32(2000)
	Default_CategoricalSpec_OffsetValueByOneDuringTraining = bool(false)
)

func (x *CategoricalSpec) Reset() {
	*x = CategoricalSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoricalSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoricalSpec) ProtoMessage() {}

func (x *CategoricalSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoricalSpec.ProtoReflect.Descriptor instead.
func (*CategoricalSpec) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{2}
}

func (x *CategoricalSpec) GetMostFrequentValue() int64 {
	if x != nil && x.MostFrequentValue != nil {
		return *x.MostFrequentValue
	}
	return 0
}

func (x *CategoricalSpec) GetNumberOfUniqueValues() int64 {
	if x != nil && x.NumberOfUniqueValues != nil {
		return *x.NumberOfUniqueValues
	}
	return 0
}

func (x *CategoricalSpec) GetMinValueCount() int32 {
	if x != nil && x.MinValueCount != nil {
		return *x.MinValueCount
	}
	return Default_CategoricalSpec_MinValueCount
}

func (x *CategoricalSpec) GetMaxNumberOfUniqueValues() int32 {
	if x != nil && x.MaxNumberOfUniqueValues != nil {
		return *x.MaxNumberOfUniqueValues
	}
	return Default_CategoricalSpec_MaxNumberOfUniqueValues
}

func (x *CategoricalSpec) GetIsAlreadyIntegerized() bool {
	if x != nil && x.IsAlreadyIntegerized != nil {
		return *x.IsAlreadyIntegerized
	}
	return false
}

func (x *CategoricalSpec) GetItems() map[string]*CategoricalSpec_VocabValue {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CategoricalSpec) GetOffsetValueByOneDuringTraining() bool {
	if x != nil && x.OffsetValueByOneDuringTraining != nil {
		return *x.OffsetValueByOneDuringTraining
	}
	return Default_CategoricalSpec_OffsetValueByOneDuringTraining
}

// Specification of a numerical column.
type NumericalSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mean value (excluding the NaN).
	Mean              *float64 `protobuf:"fixed64,1,opt,name=mean,def=0" json:"mean,omitempty"`
	MinValue          *float32 `protobuf:"fixed32,2,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	MaxValue          *float32 `protobuf:"fixed32,3,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	StandardDeviation *float64 `protobuf:"fixed64,4,opt,name=standard_deviation,json=standardDeviation" json:"standard_deviation,omitempty"`
}

// Default values for NumericalSpec fields.
const (
	Default_NumericalSpec_Mean = float64(0)
)

func (x *NumericalSpec) Reset() {
	*x = NumericalSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericalSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericalSpec) ProtoMessage() {}

func (x *NumericalSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericalSpec.ProtoReflect.Descriptor instead.
func (*NumericalSpec) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{3}
}

func (x *NumericalSpec) GetMean() float64 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return Default_NumericalSpec_Mean
}

func (x *NumericalSpec) GetMinValue() float32 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *NumericalSpec) GetMaxValue() float32 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *NumericalSpec) GetStandardDeviation() float64 {
	if x != nil && x.StandardDeviation != nil {
		return *x.StandardDeviation
	}
	return 0
}

// Specification for types with multiple values.
type MultiValuesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of observed items.
	MaxObservedSize *int32 `protobuf:"varint,1,opt,name=max_observed_size,json=maxObservedSize" json:"max_observed_size,omitempty"`
	// Minimum number of observed items.
	MinObservedSize *int32 `protobuf:"varint,2,opt,name=min_observed_size,json=minObservedSize" json:"min_observed_size,omitempty"`
}

func (x *MultiValuesSpec) Reset() {
	*x = MultiValuesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiValuesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiValuesSpec) ProtoMessage() {}

func (x *MultiValuesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiValuesSpec.ProtoReflect.Descriptor instead.
func (*MultiValuesSpec) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{4}
}

func (x *MultiValuesSpec) GetMaxObservedSize() int32 {
	if x != nil && x.MaxObservedSize != nil {
		return *x.MaxObservedSize
	}
	return 0
}

func (x *MultiValuesSpec) GetMinObservedSize() int32 {
	if x != nil && x.MinObservedSize != nil {
		return *x.MinObservedSize
	}
	return 0
}

// Specification of a boolean column.
type BooleanSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of true values.
	CountTrue *int64 `protobuf:"varint,1,opt,name=count_true,json=countTrue" json:"count_true,omitempty"`
	// Number of false values.
	CountFalse *int64 `protobuf:"varint,2,opt,name=count_false,json=countFalse" json:"count_false,omitempty"`
}

func (x *BooleanSpec) Reset() {
	*x = BooleanSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanSpec) ProtoMessage() {}

func (x *BooleanSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanSpec.ProtoReflect.Descriptor instead.
func (*BooleanSpec) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{5}
}

func (x *BooleanSpec) GetCountTrue() int64 {
	if x != nil && x.CountTrue != nil {
		return *x.CountTrue
	}
	return 0
}

func (x *BooleanSpec) GetCountFalse() int64 {
	if x != nil && x.CountFalse != nil {
		return *x.CountFalse
	}
	return 0
}

// Specification of a discretized numerical column.
//
// A "discretized numerical" value "i" is encoded as index (integer) between -1
// (inclusive) and "n = boundaries.size()" (also inclusive).
//   If i==-1, the value is missing.
//   If i==0, the original numerical value is lower (strictly) than
//   "boundaries.front()". If i==boundaries.size(), the original value is higher
//   (non strictly) to "boundaries.back()". If i \in [1, boundaries.size()[, the
//   original value is in between "boundaries[i-1]" and "boundaries[i]".
//
// Because encoding a numericla value into a discretized numerical value is
// loosely, the original numerical value cannot be recovered. In this case, the
// following logic is applied:
//   If i==-1, the numercal value is "std::nan" (this is now simpleML represent
//   missing numerical values). If i==0, the numercal value is
//   "boundaries.front()-1". If i==boundaries.size(), the numercal value is
//   "boundaries.back()+1". If i \in [1, boundaries.size()[, the numerical value
//   is "(boundaries[i-1]+boundaries[i])/2".
type DiscretizedNumericalSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Boundaries in between the bins.
	// The number of bins is boundaries.size() + 1.
	Boundaries []float32 `protobuf:"fixed32,1,rep,packed,name=boundaries" json:"boundaries,omitempty"`
	// Number of unique numerical values before the discretization.
	OriginalNumUniqueValues *int64 `protobuf:"varint,2,opt,name=original_num_unique_values,json=originalNumUniqueValues" json:"original_num_unique_values,omitempty"`
	// Maximum number of bins (at construction time).
	// // Defaults to 255 bins, that is 254 boundaries.
	MaximumNumBins *int64 `protobuf:"varint,3,opt,name=maximum_num_bins,json=maximumNumBins,def=255" json:"maximum_num_bins,omitempty"`
	// Minimum number of examples in a bin.
	MinObsInBins *int32 `protobuf:"varint,4,opt,name=min_obs_in_bins,json=minObsInBins,def=3" json:"min_obs_in_bins,omitempty"`
}

// Default values for DiscretizedNumericalSpec fields.
const (
	Default_DiscretizedNumericalSpec_MaximumNumBins = int64(255)
	Default_DiscretizedNumericalSpec_MinObsInBins   = int32(3)
)

func (x *DiscretizedNumericalSpec) Reset() {
	*x = DiscretizedNumericalSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscretizedNumericalSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscretizedNumericalSpec) ProtoMessage() {}

func (x *DiscretizedNumericalSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscretizedNumericalSpec.ProtoReflect.Descriptor instead.
func (*DiscretizedNumericalSpec) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{6}
}

func (x *DiscretizedNumericalSpec) GetBoundaries() []float32 {
	if x != nil {
		return x.Boundaries
	}
	return nil
}

func (x *DiscretizedNumericalSpec) GetOriginalNumUniqueValues() int64 {
	if x != nil && x.OriginalNumUniqueValues != nil {
		return *x.OriginalNumUniqueValues
	}
	return 0
}

func (x *DiscretizedNumericalSpec) GetMaximumNumBins() int64 {
	if x != nil && x.MaximumNumBins != nil {
		return *x.MaximumNumBins
	}
	return Default_DiscretizedNumericalSpec_MaximumNumBins
}

func (x *DiscretizedNumericalSpec) GetMinObsInBins() int32 {
	if x != nil && x.MinObsInBins != nil {
		return *x.MinObsInBins
	}
	return Default_DiscretizedNumericalSpec_MinObsInBins
}

// Tokenization parameters.
type Tokenizer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How to convert a string into a list/set of symbols.
	Splitter *Tokenizer_Splitter `protobuf:"varint,1,opt,name=splitter,enum=yggdrasil_decision_forests.dataset.proto.Tokenizer_Splitter,def=1" json:"splitter,omitempty"`
	// Separator characters. Used if splitter=SEPARATOR.
	Separator *string `protobuf:"bytes,2,opt,name=separator,def= ;," json:"separator,omitempty"`
	// Splitting regular expression. Used if splitter=REGEX_MATCH.
	Regex *string `protobuf:"bytes,3,opt,name=regex,def=([\\S]+)" json:"regex,omitempty"`
	// Cast strings to lower case before tokenization.
	ToLowerCase *bool `protobuf:"varint,4,opt,name=to_lower_case,json=toLowerCase,def=1" json:"to_lower_case,omitempty"`
	// Grouping of the tokens.
	Grouping *Tokenizer_Grouping `protobuf:"bytes,5,opt,name=grouping" json:"grouping,omitempty"`
}

// Default values for Tokenizer fields.
const (
	Default_Tokenizer_Splitter    = Tokenizer_SEPARATOR
	Default_Tokenizer_Separator   = string(" ;,")
	Default_Tokenizer_Regex       = string("([\\S]+)")
	Default_Tokenizer_ToLowerCase = bool(true)
)

func (x *Tokenizer) Reset() {
	*x = Tokenizer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tokenizer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tokenizer) ProtoMessage() {}

func (x *Tokenizer) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tokenizer.ProtoReflect.Descriptor instead.
func (*Tokenizer) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{7}
}

func (x *Tokenizer) GetSplitter() Tokenizer_Splitter {
	if x != nil && x.Splitter != nil {
		return *x.Splitter
	}
	return Default_Tokenizer_Splitter
}

func (x *Tokenizer) GetSeparator() string {
	if x != nil && x.Separator != nil {
		return *x.Separator
	}
	return Default_Tokenizer_Separator
}

func (x *Tokenizer) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return Default_Tokenizer_Regex
}

func (x *Tokenizer) GetToLowerCase() bool {
	if x != nil && x.ToLowerCase != nil {
		return *x.ToLowerCase
	}
	return Default_Tokenizer_ToLowerCase
}

func (x *Tokenizer) GetGrouping() *Tokenizer_Grouping {
	if x != nil {
		return x.Grouping
	}
	return nil
}

// Information about unstacked column. An unstacked column is a
// multi-dimensional column (e.g. an embedding) that has been split into
// multiple scalar columns.
type Unstacked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the column that was unstacked.
	OriginalName *string `protobuf:"bytes,1,opt,name=original_name,json=originalName" json:"original_name,omitempty"`
	// Index of the first column containing the unstacked feature.
	BeginColumnIdx *int32 `protobuf:"varint,2,opt,name=begin_column_idx,json=beginColumnIdx" json:"begin_column_idx,omitempty"`
	// Number of unstacked elements.
	Size *int32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	// Type of the columns.
	Type *ColumnType `protobuf:"varint,4,opt,name=type,enum=yggdrasil_decision_forests.dataset.proto.ColumnType,def=0" json:"type,omitempty"`
}

// Default values for Unstacked fields.
const (
	Default_Unstacked_Type = ColumnType_UNKNOWN
)

func (x *Unstacked) Reset() {
	*x = Unstacked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unstacked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unstacked) ProtoMessage() {}

func (x *Unstacked) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unstacked.ProtoReflect.Descriptor instead.
func (*Unstacked) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{8}
}

func (x *Unstacked) GetOriginalName() string {
	if x != nil && x.OriginalName != nil {
		return *x.OriginalName
	}
	return ""
}

func (x *Unstacked) GetBeginColumnIdx() int32 {
	if x != nil && x.BeginColumnIdx != nil {
		return *x.BeginColumnIdx
	}
	return 0
}

func (x *Unstacked) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *Unstacked) GetType() ColumnType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_Unstacked_Type
}

// Configuration for the automated "inference" logic of the data specification
// (see header for the definition of data specification).
// For example, the DataSpecificationGuide allows to express the following:
//   - The column called "feature_1" is NUMERICAL.
//   - The columns matching the regex "num_feature_.*" are NUMERICAL.
//   - Ignore the column called "feature_1".
//   - Ignore the columns matching the regex "num_feature_.*".
//   - Ignore the columns matching none of the set rules.
//   - The column called "feature_1" is a CATEGORICAL_SET and should be
//     tokenized by commas.
//   - The column called "feature_1" is a CATEGORICAL and the categorical
//     values seen less than 50 times should be ignored (considered out-of-bag).
//   - The size of the CATEGORICAL and CATEGORICAL_SET column dictionaries
//     should not have more than 1000 items.
//   - Column that look BOOLEAN should be interpreted as NUMERICAL.
//   - Use the first 100'000 record in the dataset to best infer the semantic of
//     the columns.
type DataSpecificationGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guide applied to one or a sub-set of columns according to a regular
	// expression match.
	ColumnGuides []*ColumnGuide `protobuf:"bytes,1,rep,name=column_guides,json=columnGuides" json:"column_guides,omitempty"`
	// Default guide for all columns.
	// Also apply to columns matched with "column_guides", but with a lower
	// priority. For example, if an configuration option is set both in
	// "default_column_guide" and "column_guides", the value is "column_guides"
	// will be used.
	DefaultColumnGuide *ColumnGuide `protobuf:"bytes,2,opt,name=default_column_guide,json=defaultColumnGuide" json:"default_column_guide,omitempty"`
	// If true, columns that don't match any "column_guides" regular expression
	// are ignored.
	IgnoreColumnsWithoutGuides *bool `protobuf:"varint,3,opt,name=ignore_columns_without_guides,json=ignoreColumnsWithoutGuides,def=0" json:"ignore_columns_without_guides,omitempty"`
	// Maximum number of rows to scan to infer the column types.
	// Set the value "-1" to use all rows (i.e. use the entire dataset).
	// Note: The type inference logic is only used if the user does not specify
	// the type manually.
	MaxNumScannedRowsToGuessType *int64 `protobuf:"varint,4,opt,name=max_num_scanned_rows_to_guess_type,json=maxNumScannedRowsToGuessType,def=1000" json:"max_num_scanned_rows_to_guess_type,omitempty"`
	// If true, columns initially detected as BOOLEAN (i.e. only containing "0"
	// and "1" values) will be detected as NUMERICAL.
	DetectBooleanAsNumerical *bool `protobuf:"varint,5,opt,name=detect_boolean_as_numerical,json=detectBooleanAsNumerical,def=0" json:"detect_boolean_as_numerical,omitempty"`
	// Detects numerical values (i.e. NUMERICAL) as DISCRETIZED_NUMERICAL.
	// DISCRETIZED_NUMERICAL values are discretized at loading time. Some
	// algorithms (e.g. the simpleML decision forest algorithms) will handle
	// NUMERICAL and DISCRETIZED_NUMERICAL types differently. Generally,
	// discretized columns are faster to train but can lead to sub-optimal models.
	DetectNumericalAsDiscretizedNumerical *bool `protobuf:"varint,6,opt,name=detect_numerical_as_discretized_numerical,json=detectNumericalAsDiscretizedNumerical,def=0" json:"detect_numerical_as_discretized_numerical,omitempty"`
	// Maximum number of rows to scan to compute column statistics (e.g.
	// dictionary, ratio of missing values, mean value).
	// Set the value "-1" to use all rows (i.e. use the entire dataset).
	MaxNumScannedRowsToAccumulateStatistics *int64 `protobuf:"varint,7,opt,name=max_num_scanned_rows_to_accumulate_statistics,json=maxNumScannedRowsToAccumulateStatistics,def=-1" json:"max_num_scanned_rows_to_accumulate_statistics,omitempty"`
	// If true, unstack numerical sets are multiple numerical features. This
	// operation is useful to consume multi-dimensional numerical vectors i.e.
	// list of numerical values with always the same size and semantic per
	// dimension.
	UnstackNumericalSetAsNumericals *bool `protobuf:"varint,8,opt,name=unstack_numerical_set_as_numericals,json=unstackNumericalSetAsNumericals,def=1" json:"unstack_numerical_set_as_numericals,omitempty"`
	// Remove columns of unknown type. For example, if the column has no values
	// (all the values are missing) and its type is not specified by the user.
	IgnoreUnknownTypeColumns *bool `protobuf:"varint,9,opt,name=ignore_unknown_type_columns,json=ignoreUnknownTypeColumns,def=0" json:"ignore_unknown_type_columns,omitempty"`
}

// Default values for DataSpecificationGuide fields.
const (
	Default_DataSpecificationGuide_IgnoreColumnsWithoutGuides              = bool(false)
	Default_DataSpecificationGuide_MaxNumScannedRowsToGuessType            = int64(1000)
	Default_DataSpecificationGuide_DetectBooleanAsNumerical                = bool(false)
	Default_DataSpecificationGuide_DetectNumericalAsDiscretizedNumerical   = bool(false)
	Default_DataSpecificationGuide_MaxNumScannedRowsToAccumulateStatistics = int64(-1)
	Default_DataSpecificationGuide_UnstackNumericalSetAsNumericals         = bool(true)
	Default_DataSpecificationGuide_IgnoreUnknownTypeColumns                = bool(false)
)

func (x *DataSpecificationGuide) Reset() {
	*x = DataSpecificationGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSpecificationGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSpecificationGuide) ProtoMessage() {}

func (x *DataSpecificationGuide) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSpecificationGuide.ProtoReflect.Descriptor instead.
func (*DataSpecificationGuide) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{9}
}

func (x *DataSpecificationGuide) GetColumnGuides() []*ColumnGuide {
	if x != nil {
		return x.ColumnGuides
	}
	return nil
}

func (x *DataSpecificationGuide) GetDefaultColumnGuide() *ColumnGuide {
	if x != nil {
		return x.DefaultColumnGuide
	}
	return nil
}

func (x *DataSpecificationGuide) GetIgnoreColumnsWithoutGuides() bool {
	if x != nil && x.IgnoreColumnsWithoutGuides != nil {
		return *x.IgnoreColumnsWithoutGuides
	}
	return Default_DataSpecificationGuide_IgnoreColumnsWithoutGuides
}

func (x *DataSpecificationGuide) GetMaxNumScannedRowsToGuessType() int64 {
	if x != nil && x.MaxNumScannedRowsToGuessType != nil {
		return *x.MaxNumScannedRowsToGuessType
	}
	return Default_DataSpecificationGuide_MaxNumScannedRowsToGuessType
}

func (x *DataSpecificationGuide) GetDetectBooleanAsNumerical() bool {
	if x != nil && x.DetectBooleanAsNumerical != nil {
		return *x.DetectBooleanAsNumerical
	}
	return Default_DataSpecificationGuide_DetectBooleanAsNumerical
}

func (x *DataSpecificationGuide) GetDetectNumericalAsDiscretizedNumerical() bool {
	if x != nil && x.DetectNumericalAsDiscretizedNumerical != nil {
		return *x.DetectNumericalAsDiscretizedNumerical
	}
	return Default_DataSpecificationGuide_DetectNumericalAsDiscretizedNumerical
}

func (x *DataSpecificationGuide) GetMaxNumScannedRowsToAccumulateStatistics() int64 {
	if x != nil && x.MaxNumScannedRowsToAccumulateStatistics != nil {
		return *x.MaxNumScannedRowsToAccumulateStatistics
	}
	return Default_DataSpecificationGuide_MaxNumScannedRowsToAccumulateStatistics
}

func (x *DataSpecificationGuide) GetUnstackNumericalSetAsNumericals() bool {
	if x != nil && x.UnstackNumericalSetAsNumericals != nil {
		return *x.UnstackNumericalSetAsNumericals
	}
	return Default_DataSpecificationGuide_UnstackNumericalSetAsNumericals
}

func (x *DataSpecificationGuide) GetIgnoreUnknownTypeColumns() bool {
	if x != nil && x.IgnoreUnknownTypeColumns != nil {
		return *x.IgnoreUnknownTypeColumns
	}
	return Default_DataSpecificationGuide_IgnoreUnknownTypeColumns
}

type ColumnGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regular expression on the column name.
	ColumnNamePattern *string `protobuf:"bytes,1,opt,name=column_name_pattern,json=columnNamePattern" json:"column_name_pattern,omitempty"`
	// Type of the column.
	Type       *ColumnType       `protobuf:"varint,2,opt,name=type,enum=yggdrasil_decision_forests.dataset.proto.ColumnType" json:"type,omitempty"`
	Categorial *CategoricalGuide `protobuf:"bytes,3,opt,name=categorial" json:"categorial,omitempty"`
	Numerical  *NumericalGuide   `protobuf:"bytes,4,opt,name=numerical" json:"numerical,omitempty"`
	// If "tokenizer" is specified, and if the dataset container can represent a
	// list of token natively (i.e. list of strings e.g. tf.Example), the first
	// string entry (if any) will be tokenized. If the attribute contains more
	// than one entry, an error will be raised.
	Tokenizer *TokenizerGuide `protobuf:"bytes,5,opt,name=tokenizer" json:"tokenizer,omitempty"`
	// If true, a column can be matched against multiple different "ColumnGuide"
	// with the last ColumnGuide having higher priority. For example, it the
	// "type" is set in two matching column guides, the type defined in the last
	// column guide will be used. If false, an error will be raised if more than
	// one column guide is matching a column.
	AllowMultiMatch      *bool                      `protobuf:"varint,6,opt,name=allow_multi_match,json=allowMultiMatch,def=0" json:"allow_multi_match,omitempty"`
	DiscretizedNumerical *DiscretizedNumericalGuide `protobuf:"bytes,7,opt,name=discretized_numerical,json=discretizedNumerical" json:"discretized_numerical,omitempty"`
	// If true, matching columns are ignored and won't be in the dataspec.
	IgnoreColumn *bool `protobuf:"varint,8,opt,name=ignore_column,json=ignoreColumn,def=0" json:"ignore_column,omitempty"`
}

// Default values for ColumnGuide fields.
const (
	Default_ColumnGuide_AllowMultiMatch = bool(false)
	Default_ColumnGuide_IgnoreColumn    = bool(false)
)

func (x *ColumnGuide) Reset() {
	*x = ColumnGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnGuide) ProtoMessage() {}

func (x *ColumnGuide) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnGuide.ProtoReflect.Descriptor instead.
func (*ColumnGuide) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{10}
}

func (x *ColumnGuide) GetColumnNamePattern() string {
	if x != nil && x.ColumnNamePattern != nil {
		return *x.ColumnNamePattern
	}
	return ""
}

func (x *ColumnGuide) GetType() ColumnType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ColumnType_UNKNOWN
}

func (x *ColumnGuide) GetCategorial() *CategoricalGuide {
	if x != nil {
		return x.Categorial
	}
	return nil
}

func (x *ColumnGuide) GetNumerical() *NumericalGuide {
	if x != nil {
		return x.Numerical
	}
	return nil
}

func (x *ColumnGuide) GetTokenizer() *TokenizerGuide {
	if x != nil {
		return x.Tokenizer
	}
	return nil
}

func (x *ColumnGuide) GetAllowMultiMatch() bool {
	if x != nil && x.AllowMultiMatch != nil {
		return *x.AllowMultiMatch
	}
	return Default_ColumnGuide_AllowMultiMatch
}

func (x *ColumnGuide) GetDiscretizedNumerical() *DiscretizedNumericalGuide {
	if x != nil {
		return x.DiscretizedNumerical
	}
	return nil
}

func (x *ColumnGuide) GetIgnoreColumn() bool {
	if x != nil && x.IgnoreColumn != nil {
		return *x.IgnoreColumn
	}
	return Default_ColumnGuide_IgnoreColumn
}

type CategoricalGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum frequency of an categorical value not to be replaced by the <RARE>
	// special value.
	MinVocabFrequency *int32 `protobuf:"varint,1,opt,name=min_vocab_frequency,json=minVocabFrequency,def=5" json:"min_vocab_frequency,omitempty"`
	// Maximum number of unique categorical values. If more values are present,
	// the less frequent values are considered <RARE>.
	MaxVocabCount *int32 `protobuf:"varint,2,opt,name=max_vocab_count,json=maxVocabCount,def=2000" json:"max_vocab_count,omitempty"`
	// If is_already_integerized=false, a dictionary is build for the feature.
	// Even if the feature is an integer or a float. If
	// is_already_integerized=true, the value is directly interpreted as an
	// index and should follow the following convention:
	//   - The value should be greater or equal to -1.
	//   - The value -1 is the "missing value".
	//   - The value 0 is the "out-of-dictionary value".
	//   - Several simpleML algorithms assume this is a "dense index" i.e. if the
	//     column is an input feature, it is best to have it being dense.
	IsAlreadyIntegerized *bool `protobuf:"varint,3,opt,name=is_already_integerized,json=isAlreadyIntegerized" json:"is_already_integerized,omitempty"`
	// If "is_already_integerized=true" and if
	// "number_of_already_integerized_values" is set,
	// "number_of_already_integerized_values" is the number of unique values. Such
	// attribute accepts values in [-1, number_of_already_integerized_values).
	// Values outside of this range will be considered "out-of-vocabulary".
	//
	// Note that if the dataset used to infer the dataspec contains an example
	// with a value > number_of_already_integerized_values, the example value will
	// be used instead of "number_of_already_integerized_values".
	NumberOfAlreadyIntegerizedValues *int64 `protobuf:"varint,4,opt,name=number_of_already_integerized_values,json=numberOfAlreadyIntegerizedValues" json:"number_of_already_integerized_values,omitempty"`
}

// Default values for CategoricalGuide fields.
const (
	Default_CategoricalGuide_MinVocabFrequency = int32(5)
	Default_CategoricalGuide_MaxVocabCount     = int32(2000)
)

func (x *CategoricalGuide) Reset() {
	*x = CategoricalGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoricalGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoricalGuide) ProtoMessage() {}

func (x *CategoricalGuide) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoricalGuide.ProtoReflect.Descriptor instead.
func (*CategoricalGuide) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{11}
}

func (x *CategoricalGuide) GetMinVocabFrequency() int32 {
	if x != nil && x.MinVocabFrequency != nil {
		return *x.MinVocabFrequency
	}
	return Default_CategoricalGuide_MinVocabFrequency
}

func (x *CategoricalGuide) GetMaxVocabCount() int32 {
	if x != nil && x.MaxVocabCount != nil {
		return *x.MaxVocabCount
	}
	return Default_CategoricalGuide_MaxVocabCount
}

func (x *CategoricalGuide) GetIsAlreadyIntegerized() bool {
	if x != nil && x.IsAlreadyIntegerized != nil {
		return *x.IsAlreadyIntegerized
	}
	return false
}

func (x *CategoricalGuide) GetNumberOfAlreadyIntegerizedValues() int64 {
	if x != nil && x.NumberOfAlreadyIntegerizedValues != nil {
		return *x.NumberOfAlreadyIntegerizedValues
	}
	return 0
}

type NumericalGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NumericalGuide) Reset() {
	*x = NumericalGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericalGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericalGuide) ProtoMessage() {}

func (x *NumericalGuide) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericalGuide.ProtoReflect.Descriptor instead.
func (*NumericalGuide) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{12}
}

type TokenizerGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokenizer *Tokenizer `protobuf:"bytes,1,opt,name=tokenizer" json:"tokenizer,omitempty"`
}

func (x *TokenizerGuide) Reset() {
	*x = TokenizerGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenizerGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenizerGuide) ProtoMessage() {}

func (x *TokenizerGuide) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenizerGuide.ProtoReflect.Descriptor instead.
func (*TokenizerGuide) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{13}
}

func (x *TokenizerGuide) GetTokenizer() *Tokenizer {
	if x != nil {
		return x.Tokenizer
	}
	return nil
}

type DiscretizedNumericalGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumNumBins *int64 `protobuf:"varint,1,opt,name=maximum_num_bins,json=maximumNumBins,def=255" json:"maximum_num_bins,omitempty"`
	// Minimum number of examples in a bin.
	MinObsInBins *int32 `protobuf:"varint,2,opt,name=min_obs_in_bins,json=minObsInBins,def=3" json:"min_obs_in_bins,omitempty"`
}

// Default values for DiscretizedNumericalGuide fields.
const (
	Default_DiscretizedNumericalGuide_MaximumNumBins = int64(255)
	Default_DiscretizedNumericalGuide_MinObsInBins   = int32(3)
)

func (x *DiscretizedNumericalGuide) Reset() {
	*x = DiscretizedNumericalGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscretizedNumericalGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscretizedNumericalGuide) ProtoMessage() {}

func (x *DiscretizedNumericalGuide) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscretizedNumericalGuide.ProtoReflect.Descriptor instead.
func (*DiscretizedNumericalGuide) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{14}
}

func (x *DiscretizedNumericalGuide) GetMaximumNumBins() int64 {
	if x != nil && x.MaximumNumBins != nil {
		return *x.MaximumNumBins
	}
	return Default_DiscretizedNumericalGuide_MaximumNumBins
}

func (x *DiscretizedNumericalGuide) GetMinObsInBins() int32 {
	if x != nil && x.MinObsInBins != nil {
		return *x.MinObsInBins
	}
	return Default_DiscretizedNumericalGuide_MinObsInBins
}

// Structure containing intermediary information for the computation of
// a DataSpecification.
type DataSpecificationAccumulator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*DataSpecificationAccumulator_Column `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
}

func (x *DataSpecificationAccumulator) Reset() {
	*x = DataSpecificationAccumulator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSpecificationAccumulator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSpecificationAccumulator) ProtoMessage() {}

func (x *DataSpecificationAccumulator) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSpecificationAccumulator.ProtoReflect.Descriptor instead.
func (*DataSpecificationAccumulator) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{15}
}

func (x *DataSpecificationAccumulator) GetColumns() []*DataSpecificationAccumulator_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

// Possible value of a non integerized categorical, categorical set, or
// categorical list attribute.
type CategoricalSpec_VocabValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the value.
	Index *int64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// Frequency of the value.
	Count *int64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CategoricalSpec_VocabValue) Reset() {
	*x = CategoricalSpec_VocabValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoricalSpec_VocabValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoricalSpec_VocabValue) ProtoMessage() {}

func (x *CategoricalSpec_VocabValue) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoricalSpec_VocabValue.ProtoReflect.Descriptor instead.
func (*CategoricalSpec_VocabValue) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CategoricalSpec_VocabValue) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CategoricalSpec_VocabValue) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type Tokenizer_Grouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unigrams *bool `protobuf:"varint,1,opt,name=unigrams,def=1" json:"unigrams,omitempty"`
	Bigrams  *bool `protobuf:"varint,2,opt,name=bigrams,def=0" json:"bigrams,omitempty"`
	Trigrams *bool `protobuf:"varint,3,opt,name=trigrams,def=0" json:"trigrams,omitempty"`
}

// Default values for Tokenizer_Grouping fields.
const (
	Default_Tokenizer_Grouping_Unigrams = bool(true)
	Default_Tokenizer_Grouping_Bigrams  = bool(false)
	Default_Tokenizer_Grouping_Trigrams = bool(false)
)

func (x *Tokenizer_Grouping) Reset() {
	*x = Tokenizer_Grouping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tokenizer_Grouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tokenizer_Grouping) ProtoMessage() {}

func (x *Tokenizer_Grouping) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tokenizer_Grouping.ProtoReflect.Descriptor instead.
func (*Tokenizer_Grouping) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Tokenizer_Grouping) GetUnigrams() bool {
	if x != nil && x.Unigrams != nil {
		return *x.Unigrams
	}
	return Default_Tokenizer_Grouping_Unigrams
}

func (x *Tokenizer_Grouping) GetBigrams() bool {
	if x != nil && x.Bigrams != nil {
		return *x.Bigrams
	}
	return Default_Tokenizer_Grouping_Bigrams
}

func (x *Tokenizer_Grouping) GetTrigrams() bool {
	if x != nil && x.Trigrams != nil {
		return *x.Trigrams
	}
	return Default_Tokenizer_Grouping_Trigrams
}

type DataSpecificationAccumulator_Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sum and sum of error for the Kahan summation. Used for numerical columns.
	KahanSum              *float64 `protobuf:"fixed64,1,opt,name=kahan_sum,json=kahanSum" json:"kahan_sum,omitempty"`
	KahanSumError         *float64 `protobuf:"fixed64,2,opt,name=kahan_sum_error,json=kahanSumError" json:"kahan_sum_error,omitempty"`
	MinValue              *float64 `protobuf:"fixed64,3,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	MaxValue              *float64 `protobuf:"fixed64,4,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	KahanSumOfSquare      *float64 `protobuf:"fixed64,6,opt,name=kahan_sum_of_square,json=kahanSumOfSquare" json:"kahan_sum_of_square,omitempty"`
	KahanSumOfSquareError *float64 `protobuf:"fixed64,7,opt,name=kahan_sum_of_square_error,json=kahanSumOfSquareError" json:"kahan_sum_of_square_error,omitempty"`
	// Mapping between float values (represented as an uint32) and the number of
	// times this value was saw.
	//
	// Note: Map don't allow float indexed maps.
	DiscretizedNumerical map[uint32]int32 `protobuf:"bytes,5,rep,name=discretized_numerical,json=discretizedNumerical" json:"discretized_numerical,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (x *DataSpecificationAccumulator_Column) Reset() {
	*x = DataSpecificationAccumulator_Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSpecificationAccumulator_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSpecificationAccumulator_Column) ProtoMessage() {}

func (x *DataSpecificationAccumulator_Column) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSpecificationAccumulator_Column.ProtoReflect.Descriptor instead.
func (*DataSpecificationAccumulator_Column) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP(), []int{15, 0}
}

func (x *DataSpecificationAccumulator_Column) GetKahanSum() float64 {
	if x != nil && x.KahanSum != nil {
		return *x.KahanSum
	}
	return 0
}

func (x *DataSpecificationAccumulator_Column) GetKahanSumError() float64 {
	if x != nil && x.KahanSumError != nil {
		return *x.KahanSumError
	}
	return 0
}

func (x *DataSpecificationAccumulator_Column) GetMinValue() float64 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *DataSpecificationAccumulator_Column) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *DataSpecificationAccumulator_Column) GetKahanSumOfSquare() float64 {
	if x != nil && x.KahanSumOfSquare != nil {
		return *x.KahanSumOfSquare
	}
	return 0
}

func (x *DataSpecificationAccumulator_Column) GetKahanSumOfSquareError() float64 {
	if x != nil && x.KahanSumOfSquareError != nil {
		return *x.KahanSumOfSquareError
	}
	return 0
}

func (x *DataSpecificationAccumulator_Column) GetDiscretizedNumerical() map[uint32]int32 {
	if x != nil {
		return x.DiscretizedNumerical
	}
	return nil
}

var File_yggdrasil_decision_forests_dataset_data_spec_proto protoreflect.FileDescriptor

var file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDesc = []byte{
	0x0a, 0x32, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde,
	0x01, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69,
	0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x75, 0x6e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x52, 0x0a, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x73, 0x22,
	0x95, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72,
	0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0c, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51,
	0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x12, 0x55, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x73, 0x12, 0x77, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x4f,
	0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x5c, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69,
	0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x6e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x87, 0x05, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x6f, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x6f, 0x73, 0x74, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x35, 0x52, 0x0d,
	0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x04, 0x32, 0x30, 0x30, 0x30, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x69, 0x73, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73,
	0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x23, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x4f, 0x6e, 0x65, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x7e, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73,
	0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x15, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d,
	0x69, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4d,
	0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x22, 0xd4, 0x01,
	0x0a, 0x18, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x1a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x42, 0x69, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69,
	0x6e, 0x5f, 0x6f, 0x62, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x33, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4f, 0x62, 0x73, 0x49, 0x6e,
	0x42, 0x69, 0x6e, 0x73, 0x22, 0xf0, 0x03, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x12, 0x63, 0x0a, 0x08, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x3a, 0x09, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x52, 0x08, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x20, 0x3b, 0x2c, 0x52,
	0x09, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x05, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x28, 0x5b, 0x5c, 0x53, 0x5d,
	0x2b, 0x29, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x6f, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69,
	0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x70, 0x0a,
	0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x08, 0x75, 0x6e, 0x69,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x07, 0x62,
	0x69, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x07, 0x62, 0x69, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x08,
	0x74, 0x72, 0x69, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x46, 0x0a, 0x08, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x50, 0x41,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x45, 0x58,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x52,
	0x41, 0x43, 0x54, 0x45, 0x52, 0x10, 0x03, 0x22, 0xc1, 0x01, 0x0a, 0x09, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73,
	0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9c, 0x06, 0x0a, 0x16,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x73, 0x12, 0x67, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x1d, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1a, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x67, 0x75, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x3a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x53,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x47, 0x75, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x1b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x18, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x41, 0x73, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x5f, 0x0a, 0x29, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x25, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69,
	0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x2d,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x27, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x53,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x52, 0x0a, 0x23, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x1f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x41, 0x73, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x18, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xec, 0x04, 0x0a, 0x0b, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72,
	0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72,
	0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x56, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x09, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x67,
	0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x78, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2a, 0x0a,
	0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x10, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x31,
	0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x35, 0x52, 0x11,
	0x6d, 0x69, 0x6e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x04, 0x32, 0x30, 0x30, 0x30,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x69, 0x73, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x24, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x69, 0x7a, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x79,
	0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x22, 0x74, 0x0a, 0x19,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x4e, 0x75, 0x6d, 0x42, 0x69, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f,
	0x6f, 0x62, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x33, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4f, 0x62, 0x73, 0x49, 0x6e, 0x42, 0x69,
	0x6e, 0x73, 0x22, 0xe2, 0x04, 0x0a, 0x1c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x67, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0xd8, 0x03, 0x0a,
	0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x61, 0x68, 0x61, 0x6e,
	0x5f, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6b, 0x61, 0x68, 0x61,
	0x6e, 0x53, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x61, 0x68, 0x61, 0x6e, 0x5f, 0x73, 0x75,
	0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6b,
	0x61, 0x68, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6b, 0x61, 0x68, 0x61, 0x6e, 0x5f,
	0x73, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x6b, 0x61, 0x68, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x4f, 0x66, 0x53,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x6b, 0x61, 0x68, 0x61, 0x6e, 0x5f, 0x73,
	0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6b, 0x61, 0x68, 0x61, 0x6e, 0x53,
	0x75, 0x6d, 0x4f, 0x66, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x9c, 0x01, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x67, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x1a, 0x47,
	0x0a, 0x19, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xc9, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x19,
	0x0a, 0x15, 0x44, 0x49, 0x53, 0x43, 0x52, 0x45, 0x54, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x4e, 0x55,
	0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x53,
	0x48, 0x10, 0x0a,
}

var (
	file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescOnce sync.Once
	file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescData = file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDesc
)

func file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescGZIP() []byte {
	file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescOnce.Do(func() {
		file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescData)
	})
	return file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDescData
}

var file_yggdrasil_decision_forests_dataset_data_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_yggdrasil_decision_forests_dataset_data_spec_proto_goTypes = []interface{}{
	(ColumnType)(0),                             // 0: yggdrasil_decision_forests.dataset.proto.ColumnType
	(Tokenizer_Splitter)(0),                     // 1: yggdrasil_decision_forests.dataset.proto.Tokenizer.Splitter
	(*DataSpecification)(nil),                   // 2: yggdrasil_decision_forests.dataset.proto.DataSpecification
	(*Column)(nil),                              // 3: yggdrasil_decision_forests.dataset.proto.Column
	(*CategoricalSpec)(nil),                     // 4: yggdrasil_decision_forests.dataset.proto.CategoricalSpec
	(*NumericalSpec)(nil),                       // 5: yggdrasil_decision_forests.dataset.proto.NumericalSpec
	(*MultiValuesSpec)(nil),                     // 6: yggdrasil_decision_forests.dataset.proto.MultiValuesSpec
	(*BooleanSpec)(nil),                         // 7: yggdrasil_decision_forests.dataset.proto.BooleanSpec
	(*DiscretizedNumericalSpec)(nil),            // 8: yggdrasil_decision_forests.dataset.proto.DiscretizedNumericalSpec
	(*Tokenizer)(nil),                           // 9: yggdrasil_decision_forests.dataset.proto.Tokenizer
	(*Unstacked)(nil),                           // 10: yggdrasil_decision_forests.dataset.proto.Unstacked
	(*DataSpecificationGuide)(nil),              // 11: yggdrasil_decision_forests.dataset.proto.DataSpecificationGuide
	(*ColumnGuide)(nil),                         // 12: yggdrasil_decision_forests.dataset.proto.ColumnGuide
	(*CategoricalGuide)(nil),                    // 13: yggdrasil_decision_forests.dataset.proto.CategoricalGuide
	(*NumericalGuide)(nil),                      // 14: yggdrasil_decision_forests.dataset.proto.NumericalGuide
	(*TokenizerGuide)(nil),                      // 15: yggdrasil_decision_forests.dataset.proto.TokenizerGuide
	(*DiscretizedNumericalGuide)(nil),           // 16: yggdrasil_decision_forests.dataset.proto.DiscretizedNumericalGuide
	(*DataSpecificationAccumulator)(nil),        // 17: yggdrasil_decision_forests.dataset.proto.DataSpecificationAccumulator
	nil,                                         // 18: yggdrasil_decision_forests.dataset.proto.CategoricalSpec.ItemsEntry
	(*CategoricalSpec_VocabValue)(nil),          // 19: yggdrasil_decision_forests.dataset.proto.CategoricalSpec.VocabValue
	(*Tokenizer_Grouping)(nil),                  // 20: yggdrasil_decision_forests.dataset.proto.Tokenizer.Grouping
	(*DataSpecificationAccumulator_Column)(nil), // 21: yggdrasil_decision_forests.dataset.proto.DataSpecificationAccumulator.Column
	nil, // 22: yggdrasil_decision_forests.dataset.proto.DataSpecificationAccumulator.Column.DiscretizedNumericalEntry
}
var file_yggdrasil_decision_forests_dataset_data_spec_proto_depIdxs = []int32{
	3,  // 0: yggdrasil_decision_forests.dataset.proto.DataSpecification.columns:type_name -> yggdrasil_decision_forests.dataset.proto.Column
	10, // 1: yggdrasil_decision_forests.dataset.proto.DataSpecification.unstackeds:type_name -> yggdrasil_decision_forests.dataset.proto.Unstacked
	0,  // 2: yggdrasil_decision_forests.dataset.proto.Column.type:type_name -> yggdrasil_decision_forests.dataset.proto.ColumnType
	9,  // 3: yggdrasil_decision_forests.dataset.proto.Column.tokenizer:type_name -> yggdrasil_decision_forests.dataset.proto.Tokenizer
	5,  // 4: yggdrasil_decision_forests.dataset.proto.Column.numerical:type_name -> yggdrasil_decision_forests.dataset.proto.NumericalSpec
	4,  // 5: yggdrasil_decision_forests.dataset.proto.Column.categorical:type_name -> yggdrasil_decision_forests.dataset.proto.CategoricalSpec
	8,  // 6: yggdrasil_decision_forests.dataset.proto.Column.discretized_numerical:type_name -> yggdrasil_decision_forests.dataset.proto.DiscretizedNumericalSpec
	7,  // 7: yggdrasil_decision_forests.dataset.proto.Column.boolean:type_name -> yggdrasil_decision_forests.dataset.proto.BooleanSpec
	6,  // 8: yggdrasil_decision_forests.dataset.proto.Column.multi_values:type_name -> yggdrasil_decision_forests.dataset.proto.MultiValuesSpec
	18, // 9: yggdrasil_decision_forests.dataset.proto.CategoricalSpec.items:type_name -> yggdrasil_decision_forests.dataset.proto.CategoricalSpec.ItemsEntry
	1,  // 10: yggdrasil_decision_forests.dataset.proto.Tokenizer.splitter:type_name -> yggdrasil_decision_forests.dataset.proto.Tokenizer.Splitter
	20, // 11: yggdrasil_decision_forests.dataset.proto.Tokenizer.grouping:type_name -> yggdrasil_decision_forests.dataset.proto.Tokenizer.Grouping
	0,  // 12: yggdrasil_decision_forests.dataset.proto.Unstacked.type:type_name -> yggdrasil_decision_forests.dataset.proto.ColumnType
	12, // 13: yggdrasil_decision_forests.dataset.proto.DataSpecificationGuide.column_guides:type_name -> yggdrasil_decision_forests.dataset.proto.ColumnGuide
	12, // 14: yggdrasil_decision_forests.dataset.proto.DataSpecificationGuide.default_column_guide:type_name -> yggdrasil_decision_forests.dataset.proto.ColumnGuide
	0,  // 15: yggdrasil_decision_forests.dataset.proto.ColumnGuide.type:type_name -> yggdrasil_decision_forests.dataset.proto.ColumnType
	13, // 16: yggdrasil_decision_forests.dataset.proto.ColumnGuide.categorial:type_name -> yggdrasil_decision_forests.dataset.proto.CategoricalGuide
	14, // 17: yggdrasil_decision_forests.dataset.proto.ColumnGuide.numerical:type_name -> yggdrasil_decision_forests.dataset.proto.NumericalGuide
	15, // 18: yggdrasil_decision_forests.dataset.proto.ColumnGuide.tokenizer:type_name -> yggdrasil_decision_forests.dataset.proto.TokenizerGuide
	16, // 19: yggdrasil_decision_forests.dataset.proto.ColumnGuide.discretized_numerical:type_name -> yggdrasil_decision_forests.dataset.proto.DiscretizedNumericalGuide
	9,  // 20: yggdrasil_decision_forests.dataset.proto.TokenizerGuide.tokenizer:type_name -> yggdrasil_decision_forests.dataset.proto.Tokenizer
	21, // 21: yggdrasil_decision_forests.dataset.proto.DataSpecificationAccumulator.columns:type_name -> yggdrasil_decision_forests.dataset.proto.DataSpecificationAccumulator.Column
	19, // 22: yggdrasil_decision_forests.dataset.proto.CategoricalSpec.ItemsEntry.value:type_name -> yggdrasil_decision_forests.dataset.proto.CategoricalSpec.VocabValue
	22, // 23: yggdrasil_decision_forests.dataset.proto.DataSpecificationAccumulator.Column.discretized_numerical:type_name -> yggdrasil_decision_forests.dataset.proto.DataSpecificationAccumulator.Column.DiscretizedNumericalEntry
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_yggdrasil_decision_forests_dataset_data_spec_proto_init() }
func file_yggdrasil_decision_forests_dataset_data_spec_proto_init() {
	if File_yggdrasil_decision_forests_dataset_data_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoricalSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericalSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiValuesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscretizedNumericalSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tokenizer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unstacked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSpecificationGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoricalGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericalGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenizerGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscretizedNumericalGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSpecificationAccumulator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoricalSpec_VocabValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tokenizer_Grouping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSpecificationAccumulator_Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yggdrasil_decision_forests_dataset_data_spec_proto_goTypes,
		DependencyIndexes: file_yggdrasil_decision_forests_dataset_data_spec_proto_depIdxs,
		EnumInfos:         file_yggdrasil_decision_forests_dataset_data_spec_proto_enumTypes,
		MessageInfos:      file_yggdrasil_decision_forests_dataset_data_spec_proto_msgTypes,
	}.Build()
	File_yggdrasil_decision_forests_dataset_data_spec_proto = out.File
	file_yggdrasil_decision_forests_dataset_data_spec_proto_rawDesc = nil
	file_yggdrasil_decision_forests_dataset_data_spec_proto_goTypes = nil
	file_yggdrasil_decision_forests_dataset_data_spec_proto_depIdxs = nil
}
