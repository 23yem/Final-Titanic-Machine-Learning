//
// Copyright 2022 Google LLC.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: yggdrasil_decision_forests/model/decision_tree/decision_tree.proto

package proto

import (
	proto "github.com/google/yggdrasil-decision-forests/yggdrasil_decision_forests/port/go/utils/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Output of a node in a classification tree.
type NodeClassifierOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next ID: 3
	// Label value.
	TopValue *int32 `protobuf:"varint,1,opt,name=top_value,json=topValue" json:"top_value,omitempty"`
	// Distribution of label values. The most frequent value is "top_value".
	Distribution *proto.IntegerDistributionDouble `protobuf:"bytes,2,opt,name=distribution" json:"distribution,omitempty"`
}

func (x *NodeClassifierOutput) Reset() {
	*x = NodeClassifierOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeClassifierOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeClassifierOutput) ProtoMessage() {}

func (x *NodeClassifierOutput) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeClassifierOutput.ProtoReflect.Descriptor instead.
func (*NodeClassifierOutput) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{0}
}

func (x *NodeClassifierOutput) GetTopValue() int32 {
	if x != nil && x.TopValue != nil {
		return *x.TopValue
	}
	return 0
}

func (x *NodeClassifierOutput) GetDistribution() *proto.IntegerDistributionDouble {
	if x != nil {
		return x.Distribution
	}
	return nil
}

// Output of a node in a regression tree.
type NodeRegressorOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next ID: 6
	// Label value.
	TopValue *float32 `protobuf:"fixed32,1,opt,name=top_value,json=topValue" json:"top_value,omitempty"`
	// Distribution of label values. The mean is "top_value".
	Distribution *proto.NormalDistributionDouble `protobuf:"bytes,2,opt,name=distribution" json:"distribution,omitempty"`
	// Statistics of hessian splits.
	SumGradients *float64 `protobuf:"fixed64,3,opt,name=sum_gradients,json=sumGradients" json:"sum_gradients,omitempty"`
	SumHessians  *float64 `protobuf:"fixed64,4,opt,name=sum_hessians,json=sumHessians" json:"sum_hessians,omitempty"`
	SumWeights   *float64 `protobuf:"fixed64,5,opt,name=sum_weights,json=sumWeights" json:"sum_weights,omitempty"`
}

func (x *NodeRegressorOutput) Reset() {
	*x = NodeRegressorOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegressorOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegressorOutput) ProtoMessage() {}

func (x *NodeRegressorOutput) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegressorOutput.ProtoReflect.Descriptor instead.
func (*NodeRegressorOutput) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{1}
}

func (x *NodeRegressorOutput) GetTopValue() float32 {
	if x != nil && x.TopValue != nil {
		return *x.TopValue
	}
	return 0
}

func (x *NodeRegressorOutput) GetDistribution() *proto.NormalDistributionDouble {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *NodeRegressorOutput) GetSumGradients() float64 {
	if x != nil && x.SumGradients != nil {
		return *x.SumGradients
	}
	return 0
}

func (x *NodeRegressorOutput) GetSumHessians() float64 {
	if x != nil && x.SumHessians != nil {
		return *x.SumHessians
	}
	return 0
}

func (x *NodeRegressorOutput) GetSumWeights() float64 {
	if x != nil && x.SumWeights != nil {
		return *x.SumWeights
	}
	return 0
}

// Output of a node in an uplift tree with either binary categorical or
// numerical outcome.
//
// The fields have the same definition as the fields in the message
// "UpliftCategoricalLabelDistribution".
type NodeUpliftOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Weighted number of examples.
	SumWeights *float64 `protobuf:"fixed64,1,opt,name=sum_weights,json=sumWeights" json:"sum_weights,omitempty"`
	// Currently, the code only support binary categorical or regressive outcomes.
	SumWeightsPerTreatment []float64 `protobuf:"fixed64,2,rep,packed,name=sum_weights_per_treatment,json=sumWeightsPerTreatment" json:"sum_weights_per_treatment,omitempty"`
	// Number of examples for each outcome (major) and each treatment (minor).
	// In the case of categorical outcome, exclude the zero outcome. For example,
	// in case of binary treatment, "sum_weights_per_treatment_and_outcome"
	// contains one value for each treatment. In the case of numerical outcome,
	// "sum_weights_per_treatment_and_outcome" is the weighted sum of the
	// outcomes.
	//
	// Currently, the code only supports binary categorical or regressive outcome.
	SumWeightsPerTreatmentAndOutcome []float64 `protobuf:"fixed64,3,rep,packed,name=sum_weights_per_treatment_and_outcome,json=sumWeightsPerTreatmentAndOutcome" json:"sum_weights_per_treatment_and_outcome,omitempty"`
	// treatment_effect[i] is the effect of the "i+1"-th treatment (categorical
	// value i+2) compared to the control group (0-th treatment; categorical
	// value = 1). The treatment out-of-vocabulary item (value = 0) is not taken
	// into account.
	TreatmentEffect []float32 `protobuf:"fixed32,4,rep,packed,name=treatment_effect,json=treatmentEffect" json:"treatment_effect,omitempty"`
	// Number of examples in each treatment. Not weighted.
	NumExamplesPerTreatment []int64 `protobuf:"varint,5,rep,packed,name=num_examples_per_treatment,json=numExamplesPerTreatment" json:"num_examples_per_treatment,omitempty"`
}

func (x *NodeUpliftOutput) Reset() {
	*x = NodeUpliftOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeUpliftOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeUpliftOutput) ProtoMessage() {}

func (x *NodeUpliftOutput) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeUpliftOutput.ProtoReflect.Descriptor instead.
func (*NodeUpliftOutput) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{2}
}

func (x *NodeUpliftOutput) GetSumWeights() float64 {
	if x != nil && x.SumWeights != nil {
		return *x.SumWeights
	}
	return 0
}

func (x *NodeUpliftOutput) GetSumWeightsPerTreatment() []float64 {
	if x != nil {
		return x.SumWeightsPerTreatment
	}
	return nil
}

func (x *NodeUpliftOutput) GetSumWeightsPerTreatmentAndOutcome() []float64 {
	if x != nil {
		return x.SumWeightsPerTreatmentAndOutcome
	}
	return nil
}

func (x *NodeUpliftOutput) GetTreatmentEffect() []float32 {
	if x != nil {
		return x.TreatmentEffect
	}
	return nil
}

func (x *NodeUpliftOutput) GetNumExamplesPerTreatment() []int64 {
	if x != nil {
		return x.NumExamplesPerTreatment
	}
	return nil
}

// The sub-messages of "ConditionParams" are the different types of condition
// that can be attached to a node.
type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of condition.
	//
	// Types that are assignable to Type:
	//	*Condition_NaCondition
	//	*Condition_HigherCondition
	//	*Condition_TrueValueCondition
	//	*Condition_ContainsCondition
	//	*Condition_ContainsBitmapCondition
	//	*Condition_DiscretizedHigherCondition
	//	*Condition_ObliqueCondition
	Type isCondition_Type `protobuf_oneof:"type"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{3}
}

func (m *Condition) GetType() isCondition_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Condition) GetNaCondition() *Condition_NA {
	if x, ok := x.GetType().(*Condition_NaCondition); ok {
		return x.NaCondition
	}
	return nil
}

func (x *Condition) GetHigherCondition() *Condition_Higher {
	if x, ok := x.GetType().(*Condition_HigherCondition); ok {
		return x.HigherCondition
	}
	return nil
}

func (x *Condition) GetTrueValueCondition() *Condition_TrueValue {
	if x, ok := x.GetType().(*Condition_TrueValueCondition); ok {
		return x.TrueValueCondition
	}
	return nil
}

func (x *Condition) GetContainsCondition() *Condition_ContainsVector {
	if x, ok := x.GetType().(*Condition_ContainsCondition); ok {
		return x.ContainsCondition
	}
	return nil
}

func (x *Condition) GetContainsBitmapCondition() *Condition_ContainsBitmap {
	if x, ok := x.GetType().(*Condition_ContainsBitmapCondition); ok {
		return x.ContainsBitmapCondition
	}
	return nil
}

func (x *Condition) GetDiscretizedHigherCondition() *Condition_DiscretizedHigher {
	if x, ok := x.GetType().(*Condition_DiscretizedHigherCondition); ok {
		return x.DiscretizedHigherCondition
	}
	return nil
}

func (x *Condition) GetObliqueCondition() *Condition_Oblique {
	if x, ok := x.GetType().(*Condition_ObliqueCondition); ok {
		return x.ObliqueCondition
	}
	return nil
}

type isCondition_Type interface {
	isCondition_Type()
}

type Condition_NaCondition struct {
	NaCondition *Condition_NA `protobuf:"bytes,1,opt,name=na_condition,json=naCondition,oneof"`
}

type Condition_HigherCondition struct {
	HigherCondition *Condition_Higher `protobuf:"bytes,2,opt,name=higher_condition,json=higherCondition,oneof"`
}

type Condition_TrueValueCondition struct {
	TrueValueCondition *Condition_TrueValue `protobuf:"bytes,3,opt,name=true_value_condition,json=trueValueCondition,oneof"`
}

type Condition_ContainsCondition struct {
	ContainsCondition *Condition_ContainsVector `protobuf:"bytes,4,opt,name=contains_condition,json=containsCondition,oneof"`
}

type Condition_ContainsBitmapCondition struct {
	ContainsBitmapCondition *Condition_ContainsBitmap `protobuf:"bytes,5,opt,name=contains_bitmap_condition,json=containsBitmapCondition,oneof"`
}

type Condition_DiscretizedHigherCondition struct {
	DiscretizedHigherCondition *Condition_DiscretizedHigher `protobuf:"bytes,6,opt,name=discretized_higher_condition,json=discretizedHigherCondition,oneof"`
}

type Condition_ObliqueCondition struct {
	ObliqueCondition *Condition_Oblique `protobuf:"bytes,7,opt,name=oblique_condition,json=obliqueCondition,oneof"`
}

func (*Condition_NaCondition) isCondition_Type() {}

func (*Condition_HigherCondition) isCondition_Type() {}

func (*Condition_TrueValueCondition) isCondition_Type() {}

func (*Condition_ContainsCondition) isCondition_Type() {}

func (*Condition_ContainsBitmapCondition) isCondition_Type() {}

func (*Condition_DiscretizedHigherCondition) isCondition_Type() {}

func (*Condition_ObliqueCondition) isCondition_Type() {}

// Binary condition attached to a non-leaf node.
type NodeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next ID: 9
	// Evaluation value of this condition in case of a NA (i.e. missing) value.
	NaValue *bool `protobuf:"varint,1,opt,name=na_value,json=naValue" json:"na_value,omitempty"`
	// Attribute on which the condition applies.
	Attribute *int32 `protobuf:"varint,2,opt,name=attribute" json:"attribute,omitempty"`
	// If the condition is not set, this node is a leaf node.
	Condition *Condition `protobuf:"bytes,3,opt,name=condition" json:"condition,omitempty"`
	// Number of examples (non-weighted) that reached this node during training.
	NumTrainingExamplesWithoutWeight *int64 `protobuf:"varint,4,opt,name=num_training_examples_without_weight,json=numTrainingExamplesWithoutWeight" json:"num_training_examples_without_weight,omitempty"`
	// Number of examples (weighted) that reached this node during training.
	NumTrainingExamplesWithWeight *float64 `protobuf:"fixed64,5,opt,name=num_training_examples_with_weight,json=numTrainingExamplesWithWeight" json:"num_training_examples_with_weight,omitempty"`
	// Score attached to the split.
	SplitScore *float32 `protobuf:"fixed32,6,opt,name=split_score,json=splitScore,def=0" json:"split_score,omitempty"`
	// Number of positive examples (non-weighted) that reached this node during
	// training.
	NumPosTrainingExamplesWithoutWeight *int64 `protobuf:"varint,7,opt,name=num_pos_training_examples_without_weight,json=numPosTrainingExamplesWithoutWeight" json:"num_pos_training_examples_without_weight,omitempty"`
	// Number of positive examples (weighted) that reached this node during
	// training.
	NumPosTrainingExamplesWithWeight *float64 `protobuf:"fixed64,8,opt,name=num_pos_training_examples_with_weight,json=numPosTrainingExamplesWithWeight" json:"num_pos_training_examples_with_weight,omitempty"`
}

// Default values for NodeCondition fields.
const (
	Default_NodeCondition_SplitScore = float32(0)
)

func (x *NodeCondition) Reset() {
	*x = NodeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCondition) ProtoMessage() {}

func (x *NodeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCondition.ProtoReflect.Descriptor instead.
func (*NodeCondition) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{4}
}

func (x *NodeCondition) GetNaValue() bool {
	if x != nil && x.NaValue != nil {
		return *x.NaValue
	}
	return false
}

func (x *NodeCondition) GetAttribute() int32 {
	if x != nil && x.Attribute != nil {
		return *x.Attribute
	}
	return 0
}

func (x *NodeCondition) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *NodeCondition) GetNumTrainingExamplesWithoutWeight() int64 {
	if x != nil && x.NumTrainingExamplesWithoutWeight != nil {
		return *x.NumTrainingExamplesWithoutWeight
	}
	return 0
}

func (x *NodeCondition) GetNumTrainingExamplesWithWeight() float64 {
	if x != nil && x.NumTrainingExamplesWithWeight != nil {
		return *x.NumTrainingExamplesWithWeight
	}
	return 0
}

func (x *NodeCondition) GetSplitScore() float32 {
	if x != nil && x.SplitScore != nil {
		return *x.SplitScore
	}
	return Default_NodeCondition_SplitScore
}

func (x *NodeCondition) GetNumPosTrainingExamplesWithoutWeight() int64 {
	if x != nil && x.NumPosTrainingExamplesWithoutWeight != nil {
		return *x.NumPosTrainingExamplesWithoutWeight
	}
	return 0
}

func (x *NodeCondition) GetNumPosTrainingExamplesWithWeight() float64 {
	if x != nil && x.NumPosTrainingExamplesWithWeight != nil {
		return *x.NumPosTrainingExamplesWithWeight
	}
	return 0
}

// Node in a decision tree (without the information about the children).
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next ID: 6
	// Label value. Might be unspecified for non-leaf nodes.
	//
	// Types that are assignable to Output:
	//	*Node_Classifier
	//	*Node_Regressor
	//	*Node_Uplift
	Output isNode_Output `protobuf_oneof:"output"`
	// Branching condition to the children. If not specified, this node is a leaf.
	Condition *NodeCondition `protobuf:"bytes,3,opt,name=condition" json:"condition,omitempty"`
	// Number of positive examples (non-weighted) that reached this node during
	// training.
	NumPosTrainingExamplesWithoutWeight *int64 `protobuf:"varint,4,opt,name=num_pos_training_examples_without_weight,json=numPosTrainingExamplesWithoutWeight" json:"num_pos_training_examples_without_weight,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{5}
}

func (m *Node) GetOutput() isNode_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *Node) GetClassifier() *NodeClassifierOutput {
	if x, ok := x.GetOutput().(*Node_Classifier); ok {
		return x.Classifier
	}
	return nil
}

func (x *Node) GetRegressor() *NodeRegressorOutput {
	if x, ok := x.GetOutput().(*Node_Regressor); ok {
		return x.Regressor
	}
	return nil
}

func (x *Node) GetUplift() *NodeUpliftOutput {
	if x, ok := x.GetOutput().(*Node_Uplift); ok {
		return x.Uplift
	}
	return nil
}

func (x *Node) GetCondition() *NodeCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Node) GetNumPosTrainingExamplesWithoutWeight() int64 {
	if x != nil && x.NumPosTrainingExamplesWithoutWeight != nil {
		return *x.NumPosTrainingExamplesWithoutWeight
	}
	return 0
}

type isNode_Output interface {
	isNode_Output()
}

type Node_Classifier struct {
	Classifier *NodeClassifierOutput `protobuf:"bytes,1,opt,name=classifier,oneof"`
}

type Node_Regressor struct {
	Regressor *NodeRegressorOutput `protobuf:"bytes,2,opt,name=regressor,oneof"`
}

type Node_Uplift struct {
	Uplift *NodeUpliftOutput `protobuf:"bytes,5,opt,name=uplift,oneof"`
}

func (*Node_Classifier) isNode_Output() {}

func (*Node_Regressor) isNode_Output() {}

func (*Node_Uplift) isNode_Output() {}

// Next ID: 6
// Condition of the type: value == NA (i.e. missing).
type Condition_NA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Condition_NA) Reset() {
	*x = Condition_NA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_NA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_NA) ProtoMessage() {}

func (x *Condition_NA) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_NA.ProtoReflect.Descriptor instead.
func (*Condition_NA) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{3, 0}
}

// Condition of the type: value == True.
type Condition_TrueValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Condition_TrueValue) Reset() {
	*x = Condition_TrueValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_TrueValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_TrueValue) ProtoMessage() {}

func (x *Condition_TrueValue) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_TrueValue.ProtoReflect.Descriptor instead.
func (*Condition_TrueValue) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{3, 1}
}

// Condition of the type: value >= threshold.
type Condition_Higher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Required]
	Threshold *float32 `protobuf:"fixed32,1,opt,name=threshold" json:"threshold,omitempty"`
}

func (x *Condition_Higher) Reset() {
	*x = Condition_Higher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Higher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Higher) ProtoMessage() {}

func (x *Condition_Higher) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Higher.ProtoReflect.Descriptor instead.
func (*Condition_Higher) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Condition_Higher) GetThreshold() float32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

// Condition of the type: (value \intersect elements) != empty_set.
type Condition_ContainsVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next ID: 2
	Elements []int32 `protobuf:"varint,1,rep,packed,name=elements" json:"elements,omitempty"`
}

func (x *Condition_ContainsVector) Reset() {
	*x = Condition_ContainsVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_ContainsVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_ContainsVector) ProtoMessage() {}

func (x *Condition_ContainsVector) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_ContainsVector.ProtoReflect.Descriptor instead.
func (*Condition_ContainsVector) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Condition_ContainsVector) GetElements() []int32 {
	if x != nil {
		return x.Elements
	}
	return nil
}

// Condition of the type: (value \intersect elements) != empty_set where
// elements is stored as a bitmap over the possible values.
type Condition_ContainsBitmap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next ID: 2
	// [Required]
	ElementsBitmap []byte `protobuf:"bytes,1,opt,name=elements_bitmap,json=elementsBitmap" json:"elements_bitmap,omitempty"`
}

func (x *Condition_ContainsBitmap) Reset() {
	*x = Condition_ContainsBitmap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_ContainsBitmap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_ContainsBitmap) ProtoMessage() {}

func (x *Condition_ContainsBitmap) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_ContainsBitmap.ProtoReflect.Descriptor instead.
func (*Condition_ContainsBitmap) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Condition_ContainsBitmap) GetElementsBitmap() []byte {
	if x != nil {
		return x.ElementsBitmap
	}
	return nil
}

// Condition of the type: indexed_value >= indexed_threshold.
type Condition_DiscretizedHigher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Required]
	Threshold *int32 `protobuf:"varint,1,opt,name=threshold" json:"threshold,omitempty"`
}

func (x *Condition_DiscretizedHigher) Reset() {
	*x = Condition_DiscretizedHigher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_DiscretizedHigher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_DiscretizedHigher) ProtoMessage() {}

func (x *Condition_DiscretizedHigher) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_DiscretizedHigher.ProtoReflect.Descriptor instead.
func (*Condition_DiscretizedHigher) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{3, 5}
}

func (x *Condition_DiscretizedHigher) GetThreshold() int32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

type Condition_Oblique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True iff. \sum_i examples[attribute_i] * weight_i >= threshold.
	// The "attribute" field in "NodeCondition" should be one of the
	// "attributes" in this message. If any of the attributes is missing, the
	// conditions evaluates to missing and returns "na_value".
	Attributes []int32   `protobuf:"varint,1,rep,packed,name=attributes" json:"attributes,omitempty"`
	Weights    []float32 `protobuf:"fixed32,2,rep,packed,name=weights" json:"weights,omitempty"`
	Threshold  *float32  `protobuf:"fixed32,3,opt,name=threshold" json:"threshold,omitempty"`
}

func (x *Condition_Oblique) Reset() {
	*x = Condition_Oblique{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Oblique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Oblique) ProtoMessage() {}

func (x *Condition_Oblique) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Oblique.ProtoReflect.Descriptor instead.
func (*Condition_Oblique) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP(), []int{3, 6}
}

func (x *Condition_Oblique) GetAttributes() []int32 {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Condition_Oblique) GetWeights() []float32 {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *Condition_Oblique) GetThreshold() float32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

var File_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto protoreflect.FileDescriptor

var file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDesc = []byte{
	0x0a, 0x42, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x34, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x79, 0x67, 0x67, 0x64,
	0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9a, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x79, 0x67,
	0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x02, 0x0a,
	0x13, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x64, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61,
	0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x5f, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x73, 0x75, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x75, 0x6d, 0x5f, 0x68, 0x65, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x48, 0x65, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x75, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x22, 0xb7, 0x02, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x75, 0x6d, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x19, 0x73, 0x75, 0x6d, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x16, 0x73,
	0x75, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x65, 0x61,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x25, 0x73, 0x75, 0x6d, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x20, 0x73, 0x75, 0x6d, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x1a, 0x6e, 0x75, 0x6d,
	0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xd6, 0x09, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0c, 0x6e, 0x61, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x41, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x73, 0x0a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x79, 0x67,
	0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x67,
	0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x14, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x74, 0x72, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x79, 0x67, 0x67,
	0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x95, 0x01, 0x0a, 0x1c, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x79,
	0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a,
	0x11, 0x6f, 0x62, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72,
	0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6c, 0x69, 0x71, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x62, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x04, 0x0a, 0x02, 0x4e, 0x41, 0x1a, 0x0b, 0x0a, 0x09, 0x54,
	0x72, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x26, 0x0a, 0x06, 0x48, 0x69, 0x67, 0x68,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x1a, 0x30, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x1a, 0x31, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x1a, 0x69, 0x0a, 0x07, 0x4f, 0x62, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x8d, 0x04, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x5d,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x24, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x6e, 0x75, 0x6d,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x48, 0x0a,
	0x21, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52,
	0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x28, 0x6e,
	0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x6e,
	0x75, 0x6d, 0x50, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x4f, 0x0a, 0x25, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x20, 0x6e, 0x75, 0x6d, 0x50, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x85, 0x04, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x6c, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69,
	0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x79, 0x67, 0x67,
	0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x28, 0x6e, 0x75,
	0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x6e, 0x75,
	0x6d, 0x50, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
}

var (
	file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescOnce sync.Once
	file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescData = file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDesc
)

func file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescGZIP() []byte {
	file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescOnce.Do(func() {
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescData)
	})
	return file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDescData
}

var file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_goTypes = []interface{}{
	(*NodeClassifierOutput)(nil),            // 0: yggdrasil_decision_forests.model.decision_tree.proto.NodeClassifierOutput
	(*NodeRegressorOutput)(nil),             // 1: yggdrasil_decision_forests.model.decision_tree.proto.NodeRegressorOutput
	(*NodeUpliftOutput)(nil),                // 2: yggdrasil_decision_forests.model.decision_tree.proto.NodeUpliftOutput
	(*Condition)(nil),                       // 3: yggdrasil_decision_forests.model.decision_tree.proto.Condition
	(*NodeCondition)(nil),                   // 4: yggdrasil_decision_forests.model.decision_tree.proto.NodeCondition
	(*Node)(nil),                            // 5: yggdrasil_decision_forests.model.decision_tree.proto.Node
	(*Condition_NA)(nil),                    // 6: yggdrasil_decision_forests.model.decision_tree.proto.Condition.NA
	(*Condition_TrueValue)(nil),             // 7: yggdrasil_decision_forests.model.decision_tree.proto.Condition.TrueValue
	(*Condition_Higher)(nil),                // 8: yggdrasil_decision_forests.model.decision_tree.proto.Condition.Higher
	(*Condition_ContainsVector)(nil),        // 9: yggdrasil_decision_forests.model.decision_tree.proto.Condition.ContainsVector
	(*Condition_ContainsBitmap)(nil),        // 10: yggdrasil_decision_forests.model.decision_tree.proto.Condition.ContainsBitmap
	(*Condition_DiscretizedHigher)(nil),     // 11: yggdrasil_decision_forests.model.decision_tree.proto.Condition.DiscretizedHigher
	(*Condition_Oblique)(nil),               // 12: yggdrasil_decision_forests.model.decision_tree.proto.Condition.Oblique
	(*proto.IntegerDistributionDouble)(nil), // 13: yggdrasil_decision_forests.utils.proto.IntegerDistributionDouble
	(*proto.NormalDistributionDouble)(nil),  // 14: yggdrasil_decision_forests.utils.proto.NormalDistributionDouble
}
var file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_depIdxs = []int32{
	13, // 0: yggdrasil_decision_forests.model.decision_tree.proto.NodeClassifierOutput.distribution:type_name -> yggdrasil_decision_forests.utils.proto.IntegerDistributionDouble
	14, // 1: yggdrasil_decision_forests.model.decision_tree.proto.NodeRegressorOutput.distribution:type_name -> yggdrasil_decision_forests.utils.proto.NormalDistributionDouble
	6,  // 2: yggdrasil_decision_forests.model.decision_tree.proto.Condition.na_condition:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.Condition.NA
	8,  // 3: yggdrasil_decision_forests.model.decision_tree.proto.Condition.higher_condition:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.Condition.Higher
	7,  // 4: yggdrasil_decision_forests.model.decision_tree.proto.Condition.true_value_condition:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.Condition.TrueValue
	9,  // 5: yggdrasil_decision_forests.model.decision_tree.proto.Condition.contains_condition:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.Condition.ContainsVector
	10, // 6: yggdrasil_decision_forests.model.decision_tree.proto.Condition.contains_bitmap_condition:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.Condition.ContainsBitmap
	11, // 7: yggdrasil_decision_forests.model.decision_tree.proto.Condition.discretized_higher_condition:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.Condition.DiscretizedHigher
	12, // 8: yggdrasil_decision_forests.model.decision_tree.proto.Condition.oblique_condition:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.Condition.Oblique
	3,  // 9: yggdrasil_decision_forests.model.decision_tree.proto.NodeCondition.condition:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.Condition
	0,  // 10: yggdrasil_decision_forests.model.decision_tree.proto.Node.classifier:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.NodeClassifierOutput
	1,  // 11: yggdrasil_decision_forests.model.decision_tree.proto.Node.regressor:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.NodeRegressorOutput
	2,  // 12: yggdrasil_decision_forests.model.decision_tree.proto.Node.uplift:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.NodeUpliftOutput
	4,  // 13: yggdrasil_decision_forests.model.decision_tree.proto.Node.condition:type_name -> yggdrasil_decision_forests.model.decision_tree.proto.NodeCondition
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_init() }
func file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_init() {
	if File_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeClassifierOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegressorOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeUpliftOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_NA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_TrueValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Higher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_ContainsVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_ContainsBitmap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_DiscretizedHigher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Oblique); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Condition_NaCondition)(nil),
		(*Condition_HigherCondition)(nil),
		(*Condition_TrueValueCondition)(nil),
		(*Condition_ContainsCondition)(nil),
		(*Condition_ContainsBitmapCondition)(nil),
		(*Condition_DiscretizedHigherCondition)(nil),
		(*Condition_ObliqueCondition)(nil),
	}
	file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Node_Classifier)(nil),
		(*Node_Regressor)(nil),
		(*Node_Uplift)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_goTypes,
		DependencyIndexes: file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_depIdxs,
		MessageInfos:      file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_msgTypes,
	}.Build()
	File_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto = out.File
	file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_rawDesc = nil
	file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_goTypes = nil
	file_yggdrasil_decision_forests_model_decision_tree_decision_tree_proto_depIdxs = nil
}
