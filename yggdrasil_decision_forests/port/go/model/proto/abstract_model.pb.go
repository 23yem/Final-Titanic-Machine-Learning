//
// Copyright 2022 Google LLC.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: yggdrasil_decision_forests/model/abstract_model.proto

package proto

import (
	proto "github.com/google/yggdrasil-decision-forests/yggdrasil_decision_forests/port/go/dataset/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Modeling task.
type Task int32

const (
	Task_UNDEFINED      Task = 0
	Task_CLASSIFICATION Task = 1
	Task_REGRESSION     Task = 2
	// In case of ranking, the label is expected to be between 0 and 4, and to
	// have the NDCG semantic:
	// 0: Completely unrelated.
	// 4: Perfect match.
	Task_RANKING Task = 3
	// Predicts the incremental impact of a treatment on a categorical outcome.
	// See https://en.wikipedia.org/wiki/Uplift_modelling.
	Task_CATEGORICAL_UPLIFT Task = 4
	// Predicts the incremental impact of a treatment on a numerical outcome.
	// See https://en.wikipedia.org/wiki/Uplift_modelling.
	Task_NUMERICAL_UPLIFT Task = 5
)

// Enum value maps for Task.
var (
	Task_name = map[int32]string{
		0: "UNDEFINED",
		1: "CLASSIFICATION",
		2: "REGRESSION",
		3: "RANKING",
		4: "CATEGORICAL_UPLIFT",
		5: "NUMERICAL_UPLIFT",
	}
	Task_value = map[string]int32{
		"UNDEFINED":          0,
		"CLASSIFICATION":     1,
		"REGRESSION":         2,
		"RANKING":            3,
		"CATEGORICAL_UPLIFT": 4,
		"NUMERICAL_UPLIFT":   5,
	}
)

func (x Task) Enum() *Task {
	p := new(Task)
	*p = x
	return p
}

func (x Task) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task) Descriptor() protoreflect.EnumDescriptor {
	return file_yggdrasil_decision_forests_model_abstract_model_proto_enumTypes[0].Descriptor()
}

func (Task) Type() protoreflect.EnumType {
	return &file_yggdrasil_decision_forests_model_abstract_model_proto_enumTypes[0]
}

func (x Task) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Task) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Task(num)
	return nil
}

// Deprecated: Use Task.Descriptor instead.
func (Task) EnumDescriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescGZIP(), []int{0}
}

// Contains the same information as a model::AbstractModel (without the
// data_spec field).
type AbstractModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the model. Should match one of the registered models in the
	// :model_library.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Task solved by the model e.g. classification, regression.
	Task *Task `protobuf:"varint,2,opt,name=task,enum=yggdrasil_decision_forests.model.proto.Task" json:"task,omitempty"`
	// Index of the label column in the dataspec.
	LabelColIdx *int32 `protobuf:"varint,3,opt,name=label_col_idx,json=labelColIdx" json:"label_col_idx,omitempty"`
	// Training example weights.
	Weights *proto.LinkedWeightDefinition `protobuf:"bytes,4,opt,name=weights" json:"weights,omitempty"`
	// List of indices (in the dataspec) of the model input features.
	InputFeatures []int32 `protobuf:"varint,5,rep,name=input_features,json=inputFeatures" json:"input_features,omitempty"`
	// Index of the "grouping" attribute in the dataspec for ranking problems e.g.
	// the query in a <query,document> ranking problem.
	RankingGroupColIdx *int32 `protobuf:"varint,6,opt,name=ranking_group_col_idx,json=rankingGroupColIdx,def=-1" json:"ranking_group_col_idx,omitempty"`
	// Pre-computed variable importances (VI). The VIs of the model are composed
	// of the pre-computed VIs (this field) and the "model specific VIs" (i.e.
	// variable importance computed on the fly based on the models structure).
	PrecomputedVariableImportances map[string]*VariableImportanceSet `protobuf:"bytes,7,rep,name=precomputed_variable_importances,json=precomputedVariableImportances" json:"precomputed_variable_importances,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If true, the output of a task=CLASSIFICATION model is a probability and can
	// be used accordingly (e.g. averaged, clamped to [0,1]). If false, the output
	// of the task=CLASSIFICATION model might not be a probability.
	ClassificationOutputsProbabilities *bool `protobuf:"varint,8,opt,name=classification_outputs_probabilities,json=classificationOutputsProbabilities,def=1" json:"classification_outputs_probabilities,omitempty"`
	// Index of the "treatment" attribute in the dataspec for uplift problems.
	UpliftTreatmentColIdx *int32    `protobuf:"varint,9,opt,name=uplift_treatment_col_idx,json=upliftTreatmentColIdx,def=-1" json:"uplift_treatment_col_idx,omitempty"`
	Metadata              *Metadata `protobuf:"bytes,10,opt,name=metadata" json:"metadata,omitempty"`
	// Logs of the automated hyper-parameter tuning of the model.
	HyperparameterOptimizerLogs *HyperparametersOptimizerLogs `protobuf:"bytes,11,opt,name=hyperparameter_optimizer_logs,json=hyperparameterOptimizerLogs" json:"hyperparameter_optimizer_logs,omitempty"`
	// Indicate if a model is pure for serving i.e. the model was tripped of all
	// information not required for serving.
	IsPureModel *bool `protobuf:"varint,12,opt,name=is_pure_model,json=isPureModel,def=0" json:"is_pure_model,omitempty"`
}

// Default values for AbstractModel fields.
const (
	Default_AbstractModel_RankingGroupColIdx                 = int32(-1)
	Default_AbstractModel_ClassificationOutputsProbabilities = bool(true)
	Default_AbstractModel_UpliftTreatmentColIdx              = int32(-1)
	Default_AbstractModel_IsPureModel                        = bool(false)
)

func (x *AbstractModel) Reset() {
	*x = AbstractModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractModel) ProtoMessage() {}

func (x *AbstractModel) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractModel.ProtoReflect.Descriptor instead.
func (*AbstractModel) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescGZIP(), []int{0}
}

func (x *AbstractModel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AbstractModel) GetTask() Task {
	if x != nil && x.Task != nil {
		return *x.Task
	}
	return Task_UNDEFINED
}

func (x *AbstractModel) GetLabelColIdx() int32 {
	if x != nil && x.LabelColIdx != nil {
		return *x.LabelColIdx
	}
	return 0
}

func (x *AbstractModel) GetWeights() *proto.LinkedWeightDefinition {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *AbstractModel) GetInputFeatures() []int32 {
	if x != nil {
		return x.InputFeatures
	}
	return nil
}

func (x *AbstractModel) GetRankingGroupColIdx() int32 {
	if x != nil && x.RankingGroupColIdx != nil {
		return *x.RankingGroupColIdx
	}
	return Default_AbstractModel_RankingGroupColIdx
}

func (x *AbstractModel) GetPrecomputedVariableImportances() map[string]*VariableImportanceSet {
	if x != nil {
		return x.PrecomputedVariableImportances
	}
	return nil
}

func (x *AbstractModel) GetClassificationOutputsProbabilities() bool {
	if x != nil && x.ClassificationOutputsProbabilities != nil {
		return *x.ClassificationOutputsProbabilities
	}
	return Default_AbstractModel_ClassificationOutputsProbabilities
}

func (x *AbstractModel) GetUpliftTreatmentColIdx() int32 {
	if x != nil && x.UpliftTreatmentColIdx != nil {
		return *x.UpliftTreatmentColIdx
	}
	return Default_AbstractModel_UpliftTreatmentColIdx
}

func (x *AbstractModel) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AbstractModel) GetHyperparameterOptimizerLogs() *HyperparametersOptimizerLogs {
	if x != nil {
		return x.HyperparameterOptimizerLogs
	}
	return nil
}

func (x *AbstractModel) GetIsPureModel() bool {
	if x != nil && x.IsPureModel != nil {
		return *x.IsPureModel
	}
	return Default_AbstractModel_IsPureModel
}

// Information about the model.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner of the model. Default to the user who ran the training code if
	// available.
	Owner *string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	// Unix Timestamp of the model training. Expressed in seconds.
	CreatedDate *int64 `protobuf:"varint,2,opt,name=created_date,json=createdDate" json:"created_date,omitempty"`
	// Unique identifier of the model.
	Uid *uint64 `protobuf:"varint,3,opt,name=uid" json:"uid,omitempty"`
	// Framework used to create the model.
	Framework *string `protobuf:"bytes,4,opt,name=framework" json:"framework,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *Metadata) GetCreatedDate() int64 {
	if x != nil && x.CreatedDate != nil {
		return *x.CreatedDate
	}
	return 0
}

func (x *Metadata) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *Metadata) GetFramework() string {
	if x != nil && x.Framework != nil {
		return *x.Framework
	}
	return ""
}

// Description of the importance of a given attribute. The semantic of
// "importance" is variable.
type VariableImportance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeIdx *int32   `protobuf:"varint,1,opt,name=attribute_idx,json=attributeIdx" json:"attribute_idx,omitempty"`
	Importance   *float64 `protobuf:"fixed64,2,opt,name=importance" json:"importance,omitempty"`
}

func (x *VariableImportance) Reset() {
	*x = VariableImportance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableImportance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableImportance) ProtoMessage() {}

func (x *VariableImportance) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableImportance.ProtoReflect.Descriptor instead.
func (*VariableImportance) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescGZIP(), []int{2}
}

func (x *VariableImportance) GetAttributeIdx() int32 {
	if x != nil && x.AttributeIdx != nil {
		return *x.AttributeIdx
	}
	return 0
}

func (x *VariableImportance) GetImportance() float64 {
	if x != nil && x.Importance != nil {
		return *x.Importance
	}
	return 0
}

type VariableImportanceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VariableImportances []*VariableImportance `protobuf:"bytes,1,rep,name=variable_importances,json=variableImportances" json:"variable_importances,omitempty"`
}

func (x *VariableImportanceSet) Reset() {
	*x = VariableImportanceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableImportanceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableImportanceSet) ProtoMessage() {}

func (x *VariableImportanceSet) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableImportanceSet.ProtoReflect.Descriptor instead.
func (*VariableImportanceSet) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescGZIP(), []int{3}
}

func (x *VariableImportanceSet) GetVariableImportances() []*VariableImportance {
	if x != nil {
		return x.VariableImportances
	}
	return nil
}

type HyperparametersOptimizerLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optimization steps ordered chronologically by evaluation_time.
	Steps []*HyperparametersOptimizerLogs_Step `protobuf:"bytes,1,rep,name=steps" json:"steps,omitempty"`
	// Domain of search for the hyper-parameters.
	Space *HyperParameterSpace `protobuf:"bytes,2,opt,name=space" json:"space,omitempty"`
	//  Registered key for the hyperparameter optimizer.
	HyperparameterOptimizerKey *string `protobuf:"bytes,3,opt,name=hyperparameter_optimizer_key,json=hyperparameterOptimizerKey" json:"hyperparameter_optimizer_key,omitempty"`
	// The selected hyperparameters and its score.
	//
	// Note: It is possible that the best hyperparameters are not part of the
	// "steps".
	BestHyperparameters *GenericHyperParameters `protobuf:"bytes,5,opt,name=best_hyperparameters,json=bestHyperparameters" json:"best_hyperparameters,omitempty"`
	BestScore           *float32                `protobuf:"fixed32,4,opt,name=best_score,json=bestScore" json:"best_score,omitempty"`
}

func (x *HyperparametersOptimizerLogs) Reset() {
	*x = HyperparametersOptimizerLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperparametersOptimizerLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperparametersOptimizerLogs) ProtoMessage() {}

func (x *HyperparametersOptimizerLogs) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperparametersOptimizerLogs.ProtoReflect.Descriptor instead.
func (*HyperparametersOptimizerLogs) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescGZIP(), []int{4}
}

func (x *HyperparametersOptimizerLogs) GetSteps() []*HyperparametersOptimizerLogs_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *HyperparametersOptimizerLogs) GetSpace() *HyperParameterSpace {
	if x != nil {
		return x.Space
	}
	return nil
}

func (x *HyperparametersOptimizerLogs) GetHyperparameterOptimizerKey() string {
	if x != nil && x.HyperparameterOptimizerKey != nil {
		return *x.HyperparameterOptimizerKey
	}
	return ""
}

func (x *HyperparametersOptimizerLogs) GetBestHyperparameters() *GenericHyperParameters {
	if x != nil {
		return x.BestHyperparameters
	}
	return nil
}

func (x *HyperparametersOptimizerLogs) GetBestScore() float32 {
	if x != nil && x.BestScore != nil {
		return *x.BestScore
	}
	return 0
}

type HyperparametersOptimizerLogs_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time, in seconds, relative to the start of the hyper-parameter tuning, of
	// the consuption of the hyperparameters evaluation.
	EvaluationTime *float64 `protobuf:"fixed64,1,opt,name=evaluation_time,json=evaluationTime" json:"evaluation_time,omitempty"`
	// Tested hyperparameters.
	Hyperparameters *GenericHyperParameters `protobuf:"bytes,2,opt,name=hyperparameters" json:"hyperparameters,omitempty"`
	// Score (the higher, the better) of the hyperparameters.
	// A NaN value indicates that the hyperparameters are unfeasible.
	Score *float32 `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
}

func (x *HyperparametersOptimizerLogs_Step) Reset() {
	*x = HyperparametersOptimizerLogs_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperparametersOptimizerLogs_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperparametersOptimizerLogs_Step) ProtoMessage() {}

func (x *HyperparametersOptimizerLogs_Step) ProtoReflect() protoreflect.Message {
	mi := &file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperparametersOptimizerLogs_Step.ProtoReflect.Descriptor instead.
func (*HyperparametersOptimizerLogs_Step) Descriptor() ([]byte, []int) {
	return file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescGZIP(), []int{4, 0}
}

func (x *HyperparametersOptimizerLogs_Step) GetEvaluationTime() float64 {
	if x != nil && x.EvaluationTime != nil {
		return *x.EvaluationTime
	}
	return 0
}

func (x *HyperparametersOptimizerLogs_Step) GetHyperparameters() *GenericHyperParameters {
	if x != nil {
		return x.Hyperparameters
	}
	return nil
}

func (x *HyperparametersOptimizerLogs_Step) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

var File_yggdrasil_decision_forests_model_abstract_model_proto protoreflect.FileDescriptor

var file_yggdrasil_decision_forests_model_abstract_model_proto_rawDesc = []byte{
	0x0a, 0x35, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73,
	0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x32, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x08, 0x0a, 0x0d,
	0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x43, 0x6f, 0x6c, 0x49, 0x64, 0x78, 0x12, 0x5a, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72,
	0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x15, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x12, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x49, 0x64,
	0x78, 0x12, 0xa3, 0x01, 0x0a, 0x20, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x79,
	0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1e, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x24, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x22, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x18, 0x75, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x15, 0x75, 0x70, 0x6c, 0x69, 0x66, 0x74, 0x54, 0x72, 0x65,
	0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x49, 0x64, 0x78, 0x12, 0x4c, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x88, 0x01, 0x0a, 0x1d, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x1b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x1a, 0x90, 0x01, 0x0a, 0x23, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x67, 0x67, 0x64,
	0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x59, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x6d, 0x0a,
	0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79, 0x67,
	0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xd8, 0x04, 0x0a,
	0x1c, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x5f, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x79,
	0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x51,
	0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x1c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x71, 0x0a, 0x14, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x48, 0x79, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x13, 0x62, 0x65, 0x73, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xaf, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x79, 0x67, 0x67, 0x64, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x48, 0x79, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x0f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2a, 0x74, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x55,
	0x50, 0x4c, 0x49, 0x46, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x55, 0x4d, 0x45, 0x52,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x55, 0x50, 0x4c, 0x49, 0x46, 0x54, 0x10, 0x05,
}

var (
	file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescOnce sync.Once
	file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescData = file_yggdrasil_decision_forests_model_abstract_model_proto_rawDesc
)

func file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescGZIP() []byte {
	file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescOnce.Do(func() {
		file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescData)
	})
	return file_yggdrasil_decision_forests_model_abstract_model_proto_rawDescData
}

var file_yggdrasil_decision_forests_model_abstract_model_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_yggdrasil_decision_forests_model_abstract_model_proto_goTypes = []interface{}{
	(Task)(0),                            // 0: yggdrasil_decision_forests.model.proto.Task
	(*AbstractModel)(nil),                // 1: yggdrasil_decision_forests.model.proto.AbstractModel
	(*Metadata)(nil),                     // 2: yggdrasil_decision_forests.model.proto.Metadata
	(*VariableImportance)(nil),           // 3: yggdrasil_decision_forests.model.proto.VariableImportance
	(*VariableImportanceSet)(nil),        // 4: yggdrasil_decision_forests.model.proto.VariableImportanceSet
	(*HyperparametersOptimizerLogs)(nil), // 5: yggdrasil_decision_forests.model.proto.HyperparametersOptimizerLogs
	nil,                                  // 6: yggdrasil_decision_forests.model.proto.AbstractModel.PrecomputedVariableImportancesEntry
	(*HyperparametersOptimizerLogs_Step)(nil), // 7: yggdrasil_decision_forests.model.proto.HyperparametersOptimizerLogs.Step
	(*proto.LinkedWeightDefinition)(nil),      // 8: yggdrasil_decision_forests.dataset.proto.LinkedWeightDefinition
	(*HyperParameterSpace)(nil),               // 9: yggdrasil_decision_forests.model.proto.HyperParameterSpace
	(*GenericHyperParameters)(nil),            // 10: yggdrasil_decision_forests.model.proto.GenericHyperParameters
}
var file_yggdrasil_decision_forests_model_abstract_model_proto_depIdxs = []int32{
	0,  // 0: yggdrasil_decision_forests.model.proto.AbstractModel.task:type_name -> yggdrasil_decision_forests.model.proto.Task
	8,  // 1: yggdrasil_decision_forests.model.proto.AbstractModel.weights:type_name -> yggdrasil_decision_forests.dataset.proto.LinkedWeightDefinition
	6,  // 2: yggdrasil_decision_forests.model.proto.AbstractModel.precomputed_variable_importances:type_name -> yggdrasil_decision_forests.model.proto.AbstractModel.PrecomputedVariableImportancesEntry
	2,  // 3: yggdrasil_decision_forests.model.proto.AbstractModel.metadata:type_name -> yggdrasil_decision_forests.model.proto.Metadata
	5,  // 4: yggdrasil_decision_forests.model.proto.AbstractModel.hyperparameter_optimizer_logs:type_name -> yggdrasil_decision_forests.model.proto.HyperparametersOptimizerLogs
	3,  // 5: yggdrasil_decision_forests.model.proto.VariableImportanceSet.variable_importances:type_name -> yggdrasil_decision_forests.model.proto.VariableImportance
	7,  // 6: yggdrasil_decision_forests.model.proto.HyperparametersOptimizerLogs.steps:type_name -> yggdrasil_decision_forests.model.proto.HyperparametersOptimizerLogs.Step
	9,  // 7: yggdrasil_decision_forests.model.proto.HyperparametersOptimizerLogs.space:type_name -> yggdrasil_decision_forests.model.proto.HyperParameterSpace
	10, // 8: yggdrasil_decision_forests.model.proto.HyperparametersOptimizerLogs.best_hyperparameters:type_name -> yggdrasil_decision_forests.model.proto.GenericHyperParameters
	4,  // 9: yggdrasil_decision_forests.model.proto.AbstractModel.PrecomputedVariableImportancesEntry.value:type_name -> yggdrasil_decision_forests.model.proto.VariableImportanceSet
	10, // 10: yggdrasil_decision_forests.model.proto.HyperparametersOptimizerLogs.Step.hyperparameters:type_name -> yggdrasil_decision_forests.model.proto.GenericHyperParameters
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_yggdrasil_decision_forests_model_abstract_model_proto_init() }
func file_yggdrasil_decision_forests_model_abstract_model_proto_init() {
	if File_yggdrasil_decision_forests_model_abstract_model_proto != nil {
		return
	}
	file_yggdrasil_decision_forests_model_hyperparameter_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableImportance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableImportanceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperparametersOptimizerLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperparametersOptimizerLogs_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yggdrasil_decision_forests_model_abstract_model_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yggdrasil_decision_forests_model_abstract_model_proto_goTypes,
		DependencyIndexes: file_yggdrasil_decision_forests_model_abstract_model_proto_depIdxs,
		EnumInfos:         file_yggdrasil_decision_forests_model_abstract_model_proto_enumTypes,
		MessageInfos:      file_yggdrasil_decision_forests_model_abstract_model_proto_msgTypes,
	}.Build()
	File_yggdrasil_decision_forests_model_abstract_model_proto = out.File
	file_yggdrasil_decision_forests_model_abstract_model_proto_rawDesc = nil
	file_yggdrasil_decision_forests_model_abstract_model_proto_goTypes = nil
	file_yggdrasil_decision_forests_model_abstract_model_proto_depIdxs = nil
}
